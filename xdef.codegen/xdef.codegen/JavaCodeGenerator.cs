using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace xdef.codegen
{
    public class JavaCodeGenerator : CodeGenerator
    {
        public JavaCodeGenerator(string jarPath, string className) : base(jarPath, className)
        {
        }

        public override string GetCode()
        {
            using (var writer = new StringWriter())
            {
                GenerateConsts(writer);
                writer.WriteLine();
                GenerateHandleSwitch(writer);
                GenerateFunctions(writer);
                return writer.ToString();
            }
        }

        private void GenerateHandleSwitch(StringWriter writer)
        {
            writer.Write($@"
    // Autogenerated handler method
    @Override
    public Response handleRequest(final Request request) {{
        final BinaryDataReader reader = request.getReader();
        try {{
            switch (request.getFunction()) {{
");
            foreach (var it in _methods)
            {
                writer.Write($@"
                case {it.ConstName}:
                    return {it.JavaName}(reader);");
            }
            writer.WriteLine($@"
                default:
                    return new ResponseException(ResponseException.ERROR_CODE_UNKNOWN_FUNCTION, ""XDFactory: Unknown function."");
            }}
        }} catch (final Exception ex) {{
            return new ResponseException(ResponseException.ERROR_CODE_INVALID_REQUEST, ex.getMessage());
        }}
    }}
");
        }


        private void GenerateFunctions(StringWriter writer)
        {
            foreach (var it in _methods)
            {
                writer.WriteLine($@"
    // Autogenerated method
    //{it.OriginalDefinition}
    public Response {it.JavaName} (BinaryDataReader reader) throws IOException
    {{
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }}
");
            }
        }

        private void GenerateConsts(StringWriter writer)
        {
            int i = 1;
            foreach (var it in _methods)
            {
                writer.WriteLine($"private static final int {it.ConstName} = {i++};") ;
            }
        }
    }
}
