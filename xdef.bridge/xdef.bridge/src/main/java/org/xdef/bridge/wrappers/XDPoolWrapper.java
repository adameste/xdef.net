package org.xdef.bridge.wrappers;

import java.io.IOException;

import javax.naming.OperationNotSupportedException;

import org.xdef.XDDocument;
import org.xdef.XDPool;
import org.xdef.bridge.remoteObjects.RemoteHandlingObject;
import org.xdef.bridge.server.Client;
import org.xdef.bridge.server.requests.EmptyResponse;
import org.xdef.bridge.server.requests.Request;
import org.xdef.bridge.server.requests.Response;
import org.xdef.bridge.server.requests.ResponseException;
import org.xdef.bridge.utils.BinaryDataBuilder;
import org.xdef.bridge.utils.BinaryDataReader;

public class XDPoolWrapper extends RemoteHandlingObject {

    private static final int FUNCTION_GETVERSIONINFO = 1;
    private static final int FUNCTION_CREATEXDDOCUMENT_1 = 2;
    private static final int FUNCTION_CREATEXDDOCUMENT_2 = 3;
    private static final int FUNCTION_EXISTS = 4;
    private static final int FUNCTION_GETXMDEFINITIONS = 5;
    private static final int FUNCTION_GETXMDEFINITIONNAMES = 6;
    private static final int FUNCTION_GETXMDEFINITION_1 = 7;
    private static final int FUNCTION_GETXMDEFINITION_2 = 8;
    private static final int FUNCTION_FINDMODEL = 9;
    private static final int FUNCTION_DISPLAY_1 = 10;
    private static final int FUNCTION_DISPLAY_2 = 11;
    private static final int FUNCTION_DISPLAYCODE_1 = 12;
    private static final int FUNCTION_DISPLAYCODE_2 = 13;
    private static final int FUNCTION_DISPLAYDEBUGINFO_1 = 14;
    private static final int FUNCTION_DISPLAYDEBUGINFO_2 = 15;
    private static final int FUNCTION_GETDEBUGINFO = 16;
    private static final int FUNCTION_GETVARIABLETABLE = 17;
    private static final int FUNCTION_GETDISPLAYMODE = 18;
    private static final int FUNCTION_ISRESOLVEINCLUDES = 19;
    private static final int FUNCTION_ISDEBUGMODE = 20;
    private static final int FUNCTION_ISDEBUGSHOWRESULT = 21;
    private static final int FUNCTION_ISIGNOREUNRESOLVEDEXTERNALS = 22;
    private static final int FUNCTION_ISLOCATIONSDETAILS = 23;
    private static final int FUNCTION_ISILLEGALDOCTYPE = 24;
    private static final int FUNCTION_ISCHKWARNINGS = 25;
    private static final int FUNCTION_GETXCOMPONENTS = 26;
    private static final int FUNCTION_GETXCOMPONENTBINDS = 27;
    private static final int FUNCTION_GETXCOMPONENTENUMS = 28;
    private static final int FUNCTION_GETMINYEAR = 29;
    private static final int FUNCTION_GETMAXYEAR = 30;
    private static final int FUNCTION_GETSPECIALDATES = 31;
    private static final int FUNCTION_GETXDSOURCEINFO = 32;
    private static final int FUNCTION_GETDEBUGEDITOR = 33;
    private static final int FUNCTION_GETXDEFEDITOR = 34;

    private XDPool xdPool;

    public XDPoolWrapper(Client client) {
        super(client);
    }

    public XDPoolWrapper(Client client, XDPool xdPool) {
        super(client);
        this.xdPool = xdPool;
    }

    public XDPool getXdPool() {
        return xdPool;
    }

    // Autogenerated handler method
    @Override
    public Response handleRequest(final Request request) {
        final BinaryDataReader reader = request.getReader();
        try {
            switch (request.getFunction()) {

                case FUNCTION_GETVERSIONINFO:
                    return getVersionInfo(reader);
                case FUNCTION_CREATEXDDOCUMENT_1:
                    return createXDDocument1(reader);
                case FUNCTION_CREATEXDDOCUMENT_2:
                    return createXDDocument2(reader);
                case FUNCTION_EXISTS:
                    return exists(reader);
                case FUNCTION_GETXMDEFINITIONS:
                    return getXMDefinitions(reader);
                case FUNCTION_GETXMDEFINITIONNAMES:
                    return getXMDefinitionNames(reader);
                case FUNCTION_GETXMDEFINITION_1:
                    return getXMDefinition1(reader);
                case FUNCTION_GETXMDEFINITION_2:
                    return getXMDefinition2(reader);
                case FUNCTION_FINDMODEL:
                    return findModel(reader);
                case FUNCTION_DISPLAY_1:
                    return display1(reader);
                case FUNCTION_DISPLAY_2:
                    return display2(reader);
                case FUNCTION_DISPLAYCODE_1:
                    return displayCode1(reader);
                case FUNCTION_DISPLAYCODE_2:
                    return displayCode2(reader);
                case FUNCTION_DISPLAYDEBUGINFO_1:
                    return displayDebugInfo1(reader);
                case FUNCTION_DISPLAYDEBUGINFO_2:
                    return displayDebugInfo2(reader);
                case FUNCTION_GETDEBUGINFO:
                    return getDebugInfo(reader);
                case FUNCTION_GETVARIABLETABLE:
                    return getVariableTable(reader);
                case FUNCTION_GETDISPLAYMODE:
                    return getDisplayMode(reader);
                case FUNCTION_ISRESOLVEINCLUDES:
                    return isResolveIncludes(reader);
                case FUNCTION_ISDEBUGMODE:
                    return isDebugMode(reader);
                case FUNCTION_ISDEBUGSHOWRESULT:
                    return isDebugShowResult(reader);
                case FUNCTION_ISIGNOREUNRESOLVEDEXTERNALS:
                    return isIgnoreUnresolvedExternals(reader);
                case FUNCTION_ISLOCATIONSDETAILS:
                    return isLocationsdetails(reader);
                case FUNCTION_ISILLEGALDOCTYPE:
                    return isIllegalDoctype(reader);
                case FUNCTION_ISCHKWARNINGS:
                    return isChkWarnings(reader);
                case FUNCTION_GETXCOMPONENTS:
                    return getXComponents(reader);
                case FUNCTION_GETXCOMPONENTBINDS:
                    return getXComponentBinds(reader);
                case FUNCTION_GETXCOMPONENTENUMS:
                    return getXComponentEnums(reader);
                case FUNCTION_GETMINYEAR:
                    return getMinYear(reader);
                case FUNCTION_GETMAXYEAR:
                    return getMaxYear(reader);
                case FUNCTION_GETSPECIALDATES:
                    return getSpecialDates(reader);
                case FUNCTION_GETXDSOURCEINFO:
                    return getXDSourceInfo(reader);
                case FUNCTION_GETDEBUGEDITOR:
                    return getDebugEditor(reader);
                case FUNCTION_GETXDEFEDITOR:
                    return getXdefEditor(reader);
                default:
                    return new ResponseException(ResponseException.ERROR_CODE_UNKNOWN_FUNCTION,
                            "XDFactory: Unknown function.");
            }
        } catch (final Exception ex) {
            return new ResponseException(ResponseException.ERROR_CODE_INVALID_REQUEST, ex.getMessage());
        }
    }

    // Autogenerated method
    // public abstract java.lang.String getVersionInfo();
    public Response getVersionInfo(BinaryDataReader reader) throws IOException {
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(xdPool.getVersionInfo());
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.XDDocument createXDDocument(java.lang.String);
    public Response createXDDocument1(BinaryDataReader reader) throws IOException {
        // Read params here
        String arg1 = reader.readSharpString();
        // Do actions
        XDDocumentWrapper wrap = new XDDocumentWrapper(client, xdPool.createXDDocument(arg1));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.XDDocument createXDDocument();
    public Response createXDDocument2(BinaryDataReader reader) throws IOException {
        // Read params here
        // Do actions
        XDDocumentWrapper wrap = new XDDocumentWrapper(client, xdPool.createXDDocument());
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean exists(java.lang.String);
    public Response exists(BinaryDataReader reader) throws IOException {
        // Read params here
        String arg1 = reader.readSharpString();
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(xdPool.exists(arg1));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMDefinition[] getXMDefinitions();
    public Response getXMDefinitions(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // Read params here
        // Do actions
        // XMDefinition[]Wrapper wrap = new XMDefinition[]Wrapper(client,
        // xdPool.getXMDefinitions());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String[] getXMDefinitionNames();
    public Response getXMDefinitionNames(BinaryDataReader reader) throws IOException {
        // Read params here
        // Do actions
        String[] wrap = xdPool.getXMDefinitionNames();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(wrap);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMDefinition
    // getXMDefinition(java.lang.String);
    public Response getXMDefinition1(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // Read params here
        // String arg1 = reader.readSharpString();
        // Do actions
        // XMDefinitionWrapper wrap = new XMDefinitionWrapper(client,
        // xdPool.getXMDefinition(arg1));
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMDefinition getXMDefinition();
    public Response getXMDefinition2(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMNode findModel(java.lang.String);
    public Response findModel(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();

    }

    // Autogenerated method
    // public abstract void display(java.io.PrintStream);
    public Response display1(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
    }

    // Autogenerated method
    // public abstract void display();
    public Response display2(BinaryDataReader reader) throws IOException {
        // Read params here
        // Do actions
        xdPool.display();
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract void displayCode(java.io.PrintStream);
    public Response displayCode1(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();

    }

    // Autogenerated method
    // public abstract void displayCode();
    public Response displayCode2(BinaryDataReader reader) throws IOException {
        xdPool.displayCode();
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract void displayDebugInfo(java.io.PrintStream);
    public Response displayDebugInfo1(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
    }

    // Autogenerated method
    // public abstract void displayDebugInfo();
    public Response displayDebugInfo2(BinaryDataReader reader) throws IOException {
        // Read params here
        // Do actions
        xdPool.displayDebugInfo();
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMDebugInfo getDebugInfo();
    public Response getDebugInfo(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // Read params here
        // Do actions
        /*
         * XMDebugInfoWrapper wrap = new XMDebugInfoWrapper(client,
         * xdPool.getDebugInfo()); BinaryDataBuilder builder = new BinaryDataBuilder();
         * builder.add(client.registerRemoteObject(wrap)); return new
         * Response(builder.build());
         */
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMVariableTable getVariableTable();
    public Response getVariableTable(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // Read params here
        // Do actions
        /*
         * XMVariableTableWrapper wrap = new XMVariableTableWrapper(client,
         * xdPool.getVariableTable()); BinaryDataBuilder builder = new
         * BinaryDataBuilder(); builder.add(client.registerRemoteObject(wrap)); return
         * new Response(builder.build());
         */
    }

    // Autogenerated method
    // public abstract byte getDisplayMode();
    public Response getDisplayMode (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        byte res = xdPool.getDisplayMode();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean isResolveIncludes();
    public Response isResolveIncludes (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        boolean res = xdPool.isResolveIncludes();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean isDebugMode();
    public Response isDebugMode (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        boolean res = xdPool.isDebugMode();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean isDebugShowResult();
    public Response isDebugShowResult (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        boolean res = xdPool.isDebugShowResult();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean isIgnoreUnresolvedExternals();
    public Response isIgnoreUnresolvedExternals (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        boolean res = xdPool.isIgnoreUnresolvedExternals();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean isLocationsdetails();
    public Response isLocationsdetails (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        boolean res = xdPool.isLocationsdetails();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean isIllegalDoctype();
    public Response isIllegalDoctype (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        boolean res = xdPool.isIllegalDoctype();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean isChkWarnings();
    public Response isChkWarnings (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        boolean res = xdPool.isChkWarnings();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.util.Map<java.lang.String, java.lang.String>
    // getXComponents();
    public Response getXComponents (BinaryDataReader reader) throws IOException, OperationNotSupportedException
    {
        throw new OperationNotSupportedException();
        // Read params here
        // Do actions
        //String>Wrapper wrap = new String>Wrapper(client, xdPool.getXComponents());
        //BinaryDataBuilder builder = new BinaryDataBuilder();
        //builder.add(client.registerRemoteObject(wrap));
        //return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.util.Map<java.lang.String, java.lang.String>
    // getXComponentBinds();
    public Response getXComponentBinds (BinaryDataReader reader) throws IOException, OperationNotSupportedException
    {
        throw new OperationNotSupportedException();
        // Read params here
        // Do actions
        // String>Wrapper wrap = new String>Wrapper(client, xdPool.getXComponentBinds());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.util.Map<java.lang.String, java.lang.String>
    // getXComponentEnums();
    public Response getXComponentEnums (BinaryDataReader reader) throws IOException, OperationNotSupportedException
    {
        throw new OperationNotSupportedException();
        // Read params here
        // Do actions
        // String>Wrapper wrap = new String>Wrapper(client, xdPool.getXComponentEnums());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract int getMinYear();
    public Response getMinYear (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        int res = xdPool.getMinYear();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract int getMaxYear();
    public Response getMaxYear (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        int res = xdPool.getMaxYear();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.sys.SDatetime[] getSpecialDates();
    public Response getSpecialDates (BinaryDataReader reader) throws IOException, OperationNotSupportedException
    {
        throw new OperationNotSupportedException();
        // Read params here
        // Do actions
        // SDatetime[]Wrapper wrap = new SDatetime[]Wrapper(client, xdPool.getSpecialDates());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.impl.XDSourceInfo getXDSourceInfo();
    public Response getXDSourceInfo(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // Read params here
        // Do actions
        // XDSourceInfoWrapper wrap = new XDSourceInfoWrapper(client, xdPool.getXDSourceInfo());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String getDebugEditor();
    public Response getDebugEditor (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        String res = xdPool.getDebugEditor();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String getXdefEditor();
    public Response getXdefEditor (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        String res = xdPool.getXdefEditor();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

}