package org.xdef.bridge.wrappers.proc;

import java.io.IOException;
import java.nio.file.attribute.AclEntry.Builder;

import javax.naming.OperationNotSupportedException;

import org.w3c.dom.Node;
import org.xdef.bridge.remoteObjects.RemoteHandlingObject;
import org.xdef.bridge.server.Client;
import org.xdef.bridge.server.requests.EmptyResponse;
import org.xdef.bridge.server.requests.Request;
import org.xdef.bridge.server.requests.Response;
import org.xdef.bridge.server.requests.ResponseException;
import org.xdef.bridge.utils.BinaryDataBuilder;
import org.xdef.bridge.utils.BinaryDataReader;
import org.xdef.bridge.wrappers.XDDocumentWrapper;
import org.xdef.bridge.wrappers.XDPoolWrapper;
import org.xdef.bridge.wrappers.sys.ArrayReporterWrapper;
import org.xdef.bridge.wrappers.sys.ReportWrapper;
import org.xdef.bridge.wrappers.sys.ReportWriterWrapper;
import org.xdef.component.XComponent;
import org.xdef.proc.XXNode;
import org.xdef.sys.ArrayReporter;
import org.xdef.sys.Report;

public class XXNodeWrapper extends RemoteHandlingObject {

    private static final int FUNCTION_GETXXNAME = 1;
    private static final int FUNCTION_GETXXNSURI = 2;
    private static final int FUNCTION_GETNODENAME = 3;
    private static final int FUNCTION_GETNODEURI = 4;
    private static final int FUNCTION_GETUSEROBJECT_1 = 5;
    private static final int FUNCTION_SETUSEROBJECT_1 = 6;
    private static final int FUNCTION_SETUSEROBJECT_2 = 7;
    private static final int FUNCTION_REMOVEUSEROBJECT = 8;
    private static final int FUNCTION_GETUSEROBJECT_2 = 9;
    private static final int FUNCTION_GETXPOS = 10;
    private static final int FUNCTION_GETSPOSITION = 11;
    private static final int FUNCTION_GETPARENT = 12;
    private static final int FUNCTION_GETCHILDXXNODES = 13;
    private static final int FUNCTION_GETXDDOCUMENT = 14;
    private static final int FUNCTION_GETXDPOOL = 15;
    private static final int FUNCTION_GETROOTXXELEMENT = 16;
    private static final int FUNCTION_GETXXELEMENT = 17;
    private static final int FUNCTION_GETXMELEMENT = 18;
    private static final int FUNCTION_GETXDPOSITION = 19;
    private static final int FUNCTION_GETXMDEFINITION = 20;
    private static final int FUNCTION_GETVARIABLENAMES = 21;
    private static final int FUNCTION_GETVARIABLE = 22;
    private static final int FUNCTION_SETVARIABLE_1 = 23;
    private static final int FUNCTION_SETVARIABLE_2 = 24;
    private static final int FUNCTION_SETVARIABLE_3 = 25;
    private static final int FUNCTION_SETVARIABLE_4 = 26;
    private static final int FUNCTION_GETREPORTER = 27;
    private static final int FUNCTION_GETREPORTWRITER = 28;
    private static final int FUNCTION_ERRORWARNINGS = 29;
    private static final int FUNCTION_ERRORS = 30;
    private static final int FUNCTION_GETTEMPORARYREPORTER = 31;
    private static final int FUNCTION_SETTEMPORARYREPORTER = 32;
    private static final int FUNCTION_CLEARTEMPORARYREPORTER = 33;
    private static final int FUNCTION_REMOVETEMPORARYREPORT = 34;
    private static final int FUNCTION_COPYTEMPORARYREPORTS = 35;
    private static final int FUNCTION_PUTTEMPORARYREPORT = 36;
    private static final int FUNCTION_CHKTEMPORARYERRORS = 37;
    private static final int FUNCTION_FATAL_1 = 38;
    private static final int FUNCTION_ERROR_1 = 39;
    private static final int FUNCTION_WARNING_1 = 40;
    private static final int FUNCTION_FATAL_2 = 41;
    private static final int FUNCTION_ERROR_2 = 42;
    private static final int FUNCTION_WARNING_2 = 43;
    private static final int FUNCTION_PUTREPORT = 44;
    private static final int FUNCTION_GETXXNAMESPACECONTEXT = 45;
    private static final int FUNCTION_GETXXFUNCTIONRESOLVER = 46;
    private static final int FUNCTION_GETXXVARIABLERESOLVER = 47;
    private static final int FUNCTION_GETPARSERESULT = 48;
    private static final int FUNCTION_GETXDCONTEXT = 49;
    private static final int FUNCTION_SETXDCONTEXT_1 = 50;
    private static final int FUNCTION_SETXDCONTEXT_2 = 51;
    private static final int FUNCTION_SETXDCONTEXT_3 = 52;
    private static final int FUNCTION_SETXDCONTEXT_4 = 53;
    private static final int FUNCTION_GETXMNODE = 54;
    private static final int FUNCTION_GETXCOMPONENT = 55;
    private static final int FUNCTION_SETXCOMPONENT = 56;

    private XXNode xXNode;

    public XXNodeWrapper(Client client, XXNode xXNode) {
        super(client);
        this.xXNode = xXNode;
    }

    // Autogenerated handler method
    @Override
    public Response handleRequest(final Request request) {
        final BinaryDataReader reader = request.getReader();
        try {
            switch (request.getFunction()) {

                case FUNCTION_GETXXNAME:
                    return getXXName(reader);
                case FUNCTION_GETXXNSURI:
                    return getXXNSURI(reader);
                case FUNCTION_GETNODENAME:
                    return getNodeName(reader);
                case FUNCTION_GETNODEURI:
                    return getNodeURI(reader);
                case FUNCTION_GETUSEROBJECT_1:
                    return getUserObject1(reader);
                case FUNCTION_SETUSEROBJECT_1:
                    return setUserObject1(reader);
                case FUNCTION_SETUSEROBJECT_2:
                    return setUserObject2(reader);
                case FUNCTION_REMOVEUSEROBJECT:
                    return removeUserObject(reader);
                case FUNCTION_GETUSEROBJECT_2:
                    return getUserObject2(reader);
                case FUNCTION_GETXPOS:
                    return getXPos(reader);
                case FUNCTION_GETSPOSITION:
                    return getSPosition(reader);
                case FUNCTION_GETPARENT:
                    return getParent(reader);
                case FUNCTION_GETCHILDXXNODES:
                    return getChildXXNodes(reader);
                case FUNCTION_GETXDDOCUMENT:
                    return getXDDocument(reader);
                case FUNCTION_GETXDPOOL:
                    return getXDPool(reader);
                case FUNCTION_GETROOTXXELEMENT:
                    return getRootXXElement(reader);
                case FUNCTION_GETXXELEMENT:
                    return getXXElement(reader);
                case FUNCTION_GETXMELEMENT:
                    return getXMElement(reader);
                case FUNCTION_GETXDPOSITION:
                    return getXDPosition(reader);
                case FUNCTION_GETXMDEFINITION:
                    return getXMDefinition(reader);
                case FUNCTION_GETVARIABLENAMES:
                    return getVariableNames(reader);
                case FUNCTION_GETVARIABLE:
                    return getVariable(reader);
                case FUNCTION_SETVARIABLE_1:
                    return setVariable1(reader);
                case FUNCTION_SETVARIABLE_2:
                    return setVariable2(reader);
                case FUNCTION_SETVARIABLE_3:
                    return setVariable3(reader);
                case FUNCTION_SETVARIABLE_4:
                    return setVariable4(reader);
                case FUNCTION_GETREPORTER:
                    return getReporter(reader);
                case FUNCTION_GETREPORTWRITER:
                    return getReportWriter(reader);
                case FUNCTION_ERRORWARNINGS:
                    return errorWarnings(reader);
                case FUNCTION_ERRORS:
                    return errors(reader);
                case FUNCTION_GETTEMPORARYREPORTER:
                    return getTemporaryReporter(reader);
                case FUNCTION_SETTEMPORARYREPORTER:
                    return setTemporaryReporter(reader);
                case FUNCTION_CLEARTEMPORARYREPORTER:
                    return clearTemporaryReporter(reader);
                case FUNCTION_REMOVETEMPORARYREPORT:
                    return removeTemporaryReport(reader);
                case FUNCTION_COPYTEMPORARYREPORTS:
                    return copyTemporaryReports(reader);
                case FUNCTION_PUTTEMPORARYREPORT:
                    return putTemporaryReport(reader);
                case FUNCTION_CHKTEMPORARYERRORS:
                    return chkTemporaryErrors(reader);
                case FUNCTION_FATAL_1:
                    return fatal1(reader);
                case FUNCTION_ERROR_1:
                    return error1(reader);
                case FUNCTION_WARNING_1:
                    return warning1(reader);
                case FUNCTION_FATAL_2:
                    return fatal2(reader);
                case FUNCTION_ERROR_2:
                    return error2(reader);
                case FUNCTION_WARNING_2:
                    return warning2(reader);
                case FUNCTION_PUTREPORT:
                    return putReport(reader);
                case FUNCTION_GETXXNAMESPACECONTEXT:
                    return getXXNamespaceContext(reader);
                case FUNCTION_GETXXFUNCTIONRESOLVER:
                    return getXXFunctionResolver(reader);
                case FUNCTION_GETXXVARIABLERESOLVER:
                    return getXXVariableResolver(reader);
                case FUNCTION_GETPARSERESULT:
                    return getParseResult(reader);
                case FUNCTION_GETXDCONTEXT:
                    return getXDContext(reader);
                case FUNCTION_SETXDCONTEXT_1:
                    return setXDContext1(reader);
                case FUNCTION_SETXDCONTEXT_2:
                    return setXDContext2(reader);
                case FUNCTION_SETXDCONTEXT_3:
                    return setXDContext3(reader);
                case FUNCTION_SETXDCONTEXT_4:
                    return setXDContext4(reader);
                case FUNCTION_GETXMNODE:
                    return getXMNode(reader);
                case FUNCTION_GETXCOMPONENT:
                    return getXComponent(reader);
                case FUNCTION_SETXCOMPONENT:
                    return setXComponent(reader);
                default:
                    return new ResponseException(ResponseException.ERROR_CODE_UNKNOWN_FUNCTION,
                            "XDFactory: Unknown function.");
            }
        } catch (final Exception ex) {
            return new ResponseException(ResponseException.ERROR_CODE_INVALID_REQUEST, ex.getMessage());
        }
    }

    // Autogenerated method
    // public abstract java.lang.String getXXName()
    private Response getXXName(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        String res = xXNode.getXXName();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String getXXNSURI()
    private Response getXXNSURI(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        String res = xXNode.getXXNSURI();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String getNodeName()
    private Response getNodeName(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        String res = xXNode.getNodeName();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String getNodeURI()
    private Response getNodeURI(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        String res = xXNode.getNodeURI();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.Object getUserObject()
    private Response getUserObject1(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // ObjectWrapper wrap = new ObjectWrapper(client, xXNode.getUserObject());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void setUserObject(java.lang.Object)
    private Response setUserObject1(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // Object arg1 = reader.readObject();
        // // Do actions
        // void res = xXNode.setUserObject(arg1);
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(res);
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.Object setUserObject(java.lang.String,
    // java.lang.Object)
    private Response setUserObject2(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // String arg1 = reader.readSharpString();
        // Object arg2 = reader.readObject();
        // // Do actions
        // ObjectWrapper wrap = new ObjectWrapper(client,
        // xXNode.setUserObject(arg1,arg2));
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.Object removeUserObject(java.lang.String)
    private Response removeUserObject(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // String arg1 = reader.readSharpString();
        // // Do actions
        // ObjectWrapper wrap = new ObjectWrapper(client,
        // xXNode.removeUserObject(arg1));
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.Object getUserObject(java.lang.String)
    private Response getUserObject2(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // String arg1 = reader.readSharpString();
        // // Do actions
        // ObjectWrapper wrap = new ObjectWrapper(client, xXNode.getUserObject(arg1));
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String getXPos()
    private Response getXPos(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        String res = xXNode.getXPos();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.sys.SPosition getSPosition()
    private Response getSPosition(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // SPositionWrapper wrap = new SPositionWrapper(client, xXNode.getSPosition());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.proc.XXNode getParent()
    private Response getParent(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        XXNodeWrapper wrap = new XXNodeWrapper(client, xXNode.getParent());
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.proc.XXNode[] getChildXXNodes()
    private Response getChildXXNodes(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        XXNode[] wrap = xXNode.getChildXXNodes();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(wrap.length);
        for (XXNode xxNode : wrap) {
            builder.add(client.registerRemoteObject(new XXNodeWrapper(client, xxNode)));
        }
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.XDDocument getXDDocument()
    private Response getXDDocument(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        XDDocumentWrapper wrap = new XDDocumentWrapper(client, xXNode.getXDDocument());
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.XDPool getXDPool()
    private Response getXDPool(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        XDPoolWrapper wrap = new XDPoolWrapper(client, xXNode.getXDPool());
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.proc.XXElement getRootXXElement()
    private Response getRootXXElement(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XXElementWrapper wrap = new XXElementWrapper(client, xXNode.getRootXXElement());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.proc.XXElement getXXElement()
    private Response getXXElement(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XXElementWrapper wrap = new XXElementWrapper(client, xXNode.getXXElement());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMElement getXMElement()
    private Response getXMElement(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XMElementWrapper wrap = new XMElementWrapper(client, xXNode.getXMElement());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String getXDPosition()
    private Response getXDPosition(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        String res = xXNode.getXDPosition();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMDefinition getXMDefinition()
    private Response getXMDefinition(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XMDefinitionWrapper wrap = new XMDefinitionWrapper(client, xXNode.getXMDefinition());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract java.lang.String[] getVariableNames()
    private Response getVariableNames (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         // Do actions
         String[] wrap = xXNode.getVariableNames();
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(wrap);
         return new Response(builder.build());
     }

    // Autogenerated method
    // public abstract org.xdef.XDValue getVariable(java.lang.String)
    private Response getVariable(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // String arg1 = reader.readSharpString();
        // // Do actions
        // XDValueWrapper wrap = new XDValueWrapper(client, xXNode.getVariable(arg1));
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void setVariable(java.lang.String, long)
    private Response setVariable1(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        String arg1 = reader.readSharpString();
        long arg2 = reader.readLong();
        // Do actions
        xXNode.setVariable(arg1, arg2);
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract void setVariable(java.lang.String, double)
    private Response setVariable2(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        String arg1 = reader.readSharpString();
        double arg2 = reader.readDouble();
        // Do actions
        xXNode.setVariable(arg1, arg2);
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract void setVariable(java.lang.String, boolean)
    private Response setVariable3(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        String arg1 = reader.readSharpString();
        boolean arg2 = reader.readBoolean();
        // Do actions
        xXNode.setVariable(arg1, arg2);
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract void setVariable(java.lang.String, java.lang.Object)
    private Response setVariable4(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // String arg1 = reader.readSharpString();
        // Object arg2 = reader.readObject();
        // // Do actions
        // void res = xXNode.setVariable(arg1, arg2);
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(res);
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.sys.SReporter getReporter()
    private Response getReporter(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // SReporterWrapper wrap = new SReporterWrapper(client, xXNode.getReporter());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.sys.ReportWriter getReportWriter()
    private Response getReportWriter(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        ReportWriterWrapper wrap = new ReportWriterWrapper(client, xXNode.getReportWriter());
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean errorWarnings()
    private Response errorWarnings(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        boolean res = xXNode.errorWarnings();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean errors()
    private Response errors(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        boolean res = xXNode.errors();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.sys.ArrayReporter getTemporaryReporter()
    private Response getTemporaryReporter(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        ArrayReporterWrapper wrap = new ArrayReporterWrapper(client, xXNode.getTemporaryReporter());
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.sys.ArrayReporter
    // setTemporaryReporter(org.xdef.sys.ArrayReporter)
    private Response setTemporaryReporter(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        ArrayReporter arg1 = ((ArrayReporterWrapper) client.getLocalObject(reader.readInt())).getArrayReporter();
        // Do actions
        ArrayReporterWrapper wrap = new ArrayReporterWrapper(client, xXNode.setTemporaryReporter(arg1));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void clearTemporaryReporter()
    private Response clearTemporaryReporter(BinaryDataReader reader)
            throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        xXNode.clearTemporaryReporter();
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract boolean removeTemporaryReport(org.xdef.sys.Report)
    private Response removeTemporaryReport(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        Report arg1 = ((ReportWrapper) client.getLocalObject(reader.readInt())).getReport();
        // Do actions
        boolean res = xXNode.removeTemporaryReport(arg1);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract boolean copyTemporaryReports()
    private Response copyTemporaryReports(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        boolean res = xXNode.copyTemporaryReports();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void putTemporaryReport(org.xdef.sys.Report)
    private Response putTemporaryReport(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        Report arg1 = ((ReportWrapper) client.getLocalObject(reader.readInt())).getReport();
        // Do actions
        xXNode.putTemporaryReport(arg1);
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract boolean chkTemporaryErrors()
    private Response chkTemporaryErrors(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        // Do actions
        boolean res = xXNode.chkTemporaryErrors();
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(res);
        return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void fatal(java.lang.String, java.lang.String,
    // java.lang.Object...)
    private Response fatal1 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
        throw new OperationNotSupportedException();
        //  // Read params here
        //  String arg1 = reader.readSharpString();
        //  String arg2 = reader.readSharpString();
        //  Object... arg3 = reader.readObject...();
        //  // Do actions
        //  void res = xXNode.fatal(arg1,arg2,arg3);
        //  BinaryDataBuilder builder = new BinaryDataBuilder();
        //  builder.add(res);
        //  return new Response(builder.build());
     }

    // Autogenerated method
    // public abstract void error(java.lang.String, java.lang.String,
    // java.lang.Object...)
    private Response error1 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
        throw new OperationNotSupportedException();
        //  // Read params here
        //  String arg1 = reader.readSharpString();
        //  String arg2 = reader.readSharpString();
        //  Object... arg3 = reader.readObject...();
        //  // Do actions
        //  void res = xXNode.error(arg1,arg2,arg3);
        //  BinaryDataBuilder builder = new BinaryDataBuilder();
        //  builder.add(res);
        //  return new Response(builder.build());
     }

    // Autogenerated method
    // public abstract void warning(java.lang.String, java.lang.String,
    // java.lang.Object...)
    private Response warning1 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
        throw new OperationNotSupportedException();
        //  // Read params here
        //  String arg1 = reader.readSharpString();
        //  String arg2 = reader.readSharpString();
        //  Object... arg3 = reader.readObject...();
        //  // Do actions
        //  void res = xXNode.warning(arg1,arg2,arg3);
        //  BinaryDataBuilder builder = new BinaryDataBuilder();
        //  builder.add(res);
        //  return new Response(builder.build());
     }

    // Autogenerated method
    // public abstract void fatal(long, java.lang.Object...)
    private Response fatal2 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
        throw new OperationNotSupportedException();
        //  // Read params here
        //  long arg1 = reader.readLong();
        //  Object... arg2 = reader.readObject...();
        //  // Do actions
        //  void res = xXNode.fatal(arg1,arg2);
        //  BinaryDataBuilder builder = new BinaryDataBuilder();
        //  builder.add(res);
        //  return new Response(builder.build());
     }

    // Autogenerated method
    // public abstract void error(long, java.lang.Object...)
    private Response error2 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
        throw new OperationNotSupportedException();
        //  // Read params here
        //  long arg1 = reader.readLong();
        //  Object... arg2 = reader.readObject...();
        //  // Do actions
        //  void res = xXNode.error(arg1,arg2);
        //  BinaryDataBuilder builder = new BinaryDataBuilder();
        //  builder.add(res);
        //  return new Response(builder.build());
     }

    // Autogenerated method
    // public abstract void warning(long, java.lang.Object...)
    private Response warning2 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         throw new OperationNotSupportedException();
        //  // Read params here
        //  long arg1 = reader.readLong();
        //  Object... arg2 = reader.readObject...();
        //  // Do actions
        //  void res = xXNode.warning(arg1,arg2);
        //  BinaryDataBuilder builder = new BinaryDataBuilder();
        //  builder.add(res);
        //  return new Response(builder.build());
     }

    // Autogenerated method
    // public abstract void putReport(org.xdef.sys.Report)
    private Response putReport(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // Report arg1 = reader.readReport();
        // // Do actions
        // void res = xXNode.putReport(arg1);
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(res);
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.impl.xml.KNamespace getXXNamespaceContext()
    private Response getXXNamespaceContext(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // KNamespaceWrapper wrap = new KNamespaceWrapper(client, xXNode.getXXNamespaceContext());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract javax.xml.xpath.XPathFunctionResolver getXXFunctionResolver()
    private Response getXXFunctionResolver(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XPathFunctionResolverWrapper wrap = new XPathFunctionResolverWrapper(client, xXNode.getXXFunctionResolver());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract javax.xml.xpath.XPathVariableResolver getXXVariableResolver()
    private Response getXXVariableResolver(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XPathVariableResolverWrapper wrap = new XPathVariableResolverWrapper(client, xXNode.getXXVariableResolver());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.XDParseResult getParseResult()
    private Response getParseResult(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XDParseResultWrapper wrap = new XDParseResultWrapper(client, xXNode.getParseResult());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.XDValue getXDContext()
    private Response getXDContext(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XDValueWrapper wrap = new XDValueWrapper(client, xXNode.getXDContext());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void setXDContext(org.xdef.XDContainer)
    private Response setXDContext1(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // XDContainer arg1 = reader.readXDContainer();
        // // Do actions
        // void res = xXNode.setXDContext(arg1);
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(res);
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void setXDContext(org.xdef.XDResultSet)
    private Response setXDContext2(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // XDResultSet arg1 = reader.readXDResultSet();
        // // Do actions
        // void res = xXNode.setXDContext(arg1);
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(res);
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void setXDContext(org.w3c.dom.Node)
    private Response setXDContext3(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        Node arg1 = reader.readElement();
        // Do actions
        xXNode.setXDContext(arg1);
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract void setXDContext(java.lang.String)
    private Response setXDContext4(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        // Read params here
        String arg1 = reader.readSharpString();
        // Do actions
        xXNode.setXDContext(arg1);
        return new EmptyResponse();
    }

    // Autogenerated method
    // public abstract org.xdef.model.XMNode getXMNode()
    private Response getXMNode(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XMNodeWrapper wrap = new XMNodeWrapper(client, xXNode.getXMNode());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract org.xdef.component.XComponent getXComponent()
    private Response getXComponent(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // // Do actions
        // XComponentWrapper wrap = new XComponentWrapper(client, xXNode.getXComponent());
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(client.registerRemoteObject(wrap));
        // return new Response(builder.build());
    }

    // Autogenerated method
    // public abstract void setXComponent(org.xdef.component.XComponent)
    private Response setXComponent(BinaryDataReader reader) throws IOException, OperationNotSupportedException {
        throw new OperationNotSupportedException();
        // // Read params here
        // XComponent arg1 = reader.readXComponent();
        // // Do actions
        // void res = xXNode.setXComponent(arg1);
        // BinaryDataBuilder builder = new BinaryDataBuilder();
        // builder.add(res);
        // return new Response(builder.build());
    }

}