package org.xdef.bridge.wrappers;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.Properties;

import javax.imageio.IIOException;
import javax.swing.RepaintManager;

import org.w3c.dom.Element;
import org.xdef.XDBuilder;
import org.xdef.XDDocument;
import org.xdef.XDFactory;
import org.xdef.XDPool;
import org.xdef.bridge.remoteObjects.RemoteHandlingObject;
import org.xdef.bridge.server.Client;
import org.xdef.bridge.server.requests.EmptyResponse;
import org.xdef.bridge.server.requests.Request;
import org.xdef.bridge.server.requests.Response;
import org.xdef.bridge.server.requests.ResponseException;
import org.xdef.bridge.utils.BinaryDataBuilder;
import org.xdef.bridge.utils.BinaryDataReader;
import org.xdef.bridge.wrappers.streams.RemoteInputStream;
import org.xdef.bridge.wrappers.streams.RemoteOutputStream;
import org.xdef.bridge.wrappers.streams.RemoteStreamWrapper;
import org.xdef.impl.XBuilder;
import org.xdef.sys.ReportReader;
import org.xdef.sys.ReportWriter;

public class XDFactoryWrapper extends RemoteHandlingObject {

    private static final int FUNCTION_GETXDVERSION = 1;
    private static final int FUNCTION_GETXDBUILDER_1 = 2;
    private static final int FUNCTION_GETXDBUILDER_2 = 3;
    private static final int FUNCTION_COMPILEXD_1 = 4;
    private static final int FUNCTION_COMPILEXD_2 = 5;
    private static final int FUNCTION_COMPILEXD_3 = 6;
    private static final int FUNCTION_COMPILEXD_4 = 7;
    private static final int FUNCTION_COMPILEXD_5 = 8;
    private static final int FUNCTION_COMPILEXD_6 = 9;
    private static final int FUNCTION_COMPILEXD_7 = 10;
    private static final int FUNCTION_XPARSE_1 = 11;
    private static final int FUNCTION_XPARSE_2 = 12;
    private static final int FUNCTION_CREATEXDINPUT_1 = 13;
    private static final int FUNCTION_CREATEXDINPUT_2 = 14;
    private static final int FUNCTION_CREATEXDINPUT_3 = 15;
    private static final int FUNCTION_CREATEXDOUTPUT_1 = 16;
    private static final int FUNCTION_CREATEXDOUTPUT_2 = 17;
    private static final int FUNCTION_CREATEXDOUTPUT_3 = 18;
    private static final int FUNCTION_CREATEXDELEMENT = 19;
    private static final int FUNCTION_CREATEXDNAMEDVALUE = 20;
    private static final int FUNCTION_CREATEXDCONTAINER_1 = 21;
    private static final int FUNCTION_CREATEXDCONTAINER_2 = 22;
    private static final int FUNCTION_CREATESQLSERVICE_1 = 23;
    private static final int FUNCTION_CREATESQLSERVICE_2 = 24;
    private static final int FUNCTION_CREATEXDRESULTSET_1 = 25;
    private static final int FUNCTION_CREATEXDRESULTSET_2 = 26;
    private static final int FUNCTION_CREATEXDXMLOUTSTREAM_1 = 27;
    private static final int FUNCTION_CREATEXDXMLOUTSTREAM_2 = 28;
    private static final int FUNCTION_CREATEPARSERESULT = 29;
    private static final int FUNCTION_CREATEXDVALUE = 30;
    private static final int FUNCTION_WRITEXDPOOL_1 = 31;
    private static final int FUNCTION_WRITEXDPOOL_2 = 32;
    private static final int FUNCTION_WRITEXDPOOL_3 = 33;
    private static final int FUNCTION_READXDPOOL_1 = 34;
    private static final int FUNCTION_READXDPOOL_2 = 35;
    private static final int FUNCTION_READXDPOOL_3 = 36;
    private static final int FUNCTION_READXDPOOL_4 = 37;

    private static final int OBJECT_TYPE_FILE = 1;
    private static final int OBJECT_TYPE_STREAM = 2;
    private static final int OBJECT_TYPE_STRING = 3;
    private static final int OBJECT_TYPE_URL = 4;

    public XDFactoryWrapper(final Client client) {
        super(client);
    }

    // Autogenerated handler method
    @Override
    public Response handleRequest(final Request request) {
        final BinaryDataReader reader = request.getReader();
        try {
            switch (request.getFunction()) {

                case FUNCTION_GETXDVERSION:
                    return getXDVersion(reader);
                case FUNCTION_GETXDBUILDER_1:
                    return getXDBuilder1(reader);
                case FUNCTION_GETXDBUILDER_2:
                    return getXDBuilder2(reader);
                case FUNCTION_COMPILEXD_1:
                    return compileXD1(reader);
                case FUNCTION_COMPILEXD_2:
                    return compileXD2(reader);
                case FUNCTION_COMPILEXD_3:
                    return compileXD3(reader);
                case FUNCTION_COMPILEXD_4:
                    return compileXD4(reader);
                case FUNCTION_COMPILEXD_5:
                    return compileXD5(reader);
                case FUNCTION_COMPILEXD_6:
                    return compileXD6(reader);
                case FUNCTION_COMPILEXD_7:
                    return compileXD7(reader);
                case FUNCTION_XPARSE_1:
                    return xparse1(reader);
                case FUNCTION_XPARSE_2:
                    return xparse2(reader);
                case FUNCTION_CREATEXDINPUT_1:
                    return createXDInput1(reader);
                case FUNCTION_CREATEXDINPUT_2:
                    return createXDInput2(reader);
                case FUNCTION_CREATEXDINPUT_3:
                    return createXDInput3(reader);
                case FUNCTION_CREATEXDOUTPUT_1:
                    return createXDOutput1(reader);
                case FUNCTION_CREATEXDOUTPUT_2:
                    return createXDOutput2(reader);
                case FUNCTION_CREATEXDOUTPUT_3:
                    return createXDOutput3(reader);
                case FUNCTION_CREATEXDELEMENT:
                    return createXDElement(reader);
                case FUNCTION_CREATEXDNAMEDVALUE:
                    return createXDNamedValue(reader);
                case FUNCTION_CREATEXDCONTAINER_1:
                    return createXDContainer1(reader);
                case FUNCTION_CREATEXDCONTAINER_2:
                    return createXDContainer2(reader);
                case FUNCTION_CREATESQLSERVICE_1:
                    return createSQLService1(reader);
                case FUNCTION_CREATESQLSERVICE_2:
                    return createSQLService2(reader);
                case FUNCTION_CREATEXDRESULTSET_1:
                    return createXDResultSet1(reader);
                case FUNCTION_CREATEXDRESULTSET_2:
                    return createXDResultSet2(reader);
                case FUNCTION_CREATEXDXMLOUTSTREAM_1:
                    return createXDXmlOutStream1(reader);
                case FUNCTION_CREATEXDXMLOUTSTREAM_2:
                    return createXDXmlOutStream2(reader);
                case FUNCTION_CREATEPARSERESULT:
                    return createParseResult(reader);
                case FUNCTION_CREATEXDVALUE:
                    return createXDValue(reader);
                case FUNCTION_WRITEXDPOOL_1:
                    return writeXDPool1(reader);
                case FUNCTION_WRITEXDPOOL_2:
                    return writeXDPool2(reader);
                case FUNCTION_WRITEXDPOOL_3:
                    return writeXDPool3(reader);
                case FUNCTION_READXDPOOL_1:
                    return readXDPool1(reader);
                case FUNCTION_READXDPOOL_2:
                    return readXDPool2(reader);
                case FUNCTION_READXDPOOL_3:
                    return readXDPool3(reader);
                case FUNCTION_READXDPOOL_4:
                    return readXDPool4(reader);
                default:
                    return new ResponseException(ResponseException.ERROR_CODE_UNKNOWN_FUNCTION, "XDFactory: Unknown function.");
            }
        } catch (final Exception ex) {
            return new ResponseException(ResponseException.ERROR_CODE_INVALID_REQUEST, ex.getMessage());
        }
    }
    
    // Autogenerated method
    //  public static java.lang.String getXDVersion();
    public Response getXDVersion (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(XDFactory.getXDVersion());
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDBuilder getXDBuilder(java.util.Properties);
    public Response getXDBuilder1 (BinaryDataReader reader) throws IOException
    {
        Properties props = readProperties(reader);
        XDBuilder res = XDFactory.getXDBuilder(props);
        XDBuilderWrapper wrap =  new XDBuilderWrapper(client, res);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDBuilder getXDBuilder(org.xdef.sys.ReportWriter, java.util.Properties);
    public Response getXDBuilder2 (BinaryDataReader reader) throws IOException
    {
        ReportWriter rw = (ReportWriter) client.getLocalObject(reader.readInt());
        Properties props = readProperties(reader);
        XDBuilder res = XDFactory.getXDBuilder(rw, props);
        XDBuilderWrapper wrap =  new XDBuilderWrapper(client, res);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDPool compileXD(java.util.Properties, java.lang.String[]) throws org.xdef.sys.SRuntimeException;
    public Response compileXD1 (BinaryDataReader reader) throws IOException
    {
        Properties props = readProperties(reader);
        int cnt = reader.readInt();
        String[] arr = new String[cnt];
        for(int i = 0; i < cnt; i++) arr[i] = reader.readSharpString();
        XDPool pool = XDFactory.compileXD(props, arr);
        XDPoolWrapper wrap = new XDPoolWrapper(client, pool);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDPool compileXD(java.util.Properties, java.net.URL[]) throws org.xdef.sys.SRuntimeException;
    public Response compileXD2 (BinaryDataReader reader) throws IOException
    {
        Properties props = readProperties(reader);
        int cnt = reader.readInt();
        URL[] arr = new URL[cnt];
        for(int i = 0; i < cnt; i++) arr[i] = new URL(reader.readSharpString());
        XDPool pool = XDFactory.compileXD(props, arr);
        XDPoolWrapper wrap = new XDPoolWrapper(client, pool);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDPool compileXD(java.util.Properties, java.io.File[]) throws org.xdef.sys.SRuntimeException;
    public Response compileXD3 (BinaryDataReader reader) throws IOException
    {
        Properties props = readProperties(reader);
        int cnt = reader.readInt();
        File[] arr = new File[cnt];
        for(int i = 0; i < cnt; i++) arr[i] = new File(reader.readSharpString());
        XDPool pool = XDFactory.compileXD(props, arr);
        XDPoolWrapper wrap = new XDPoolWrapper(client, pool);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDPool compileXD(java.util.Properties, java.io.InputStream[]) throws org.xdef.sys.SRuntimeException;
    public Response compileXD4 (BinaryDataReader reader) throws IOException
    {
        Properties props = readProperties(reader);
        int cnt = reader.readInt();
        InputStream[] arr = new InputStream[cnt];
        for(int i = 0; i < cnt; i++) arr[i] = new RemoteInputStream(new RemoteStreamWrapper(client, reader.readInt()));
        XDPool pool = XDFactory.compileXD(props, arr);
        XDPoolWrapper wrap = new XDPoolWrapper(client, pool);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDPool compileXD(java.util.Properties, java.lang.Object[], java.lang.String[]) throws org.xdef.sys.SRuntimeException;
    public Response compileXD5 (BinaryDataReader reader) throws IOException
    {
        Properties props = readProperties(reader);
        Object[] sources = readObjectArgs(reader);
        int cnt = reader.readInt();
        String[] ids = new String[cnt];
        for(int i = 0; i < cnt; i++) ids[i] = reader.readSharpString();
        XDPool pool = XDFactory.compileXD(props, sources, ids);
        XDPoolWrapper wrap = new XDPoolWrapper(client, pool);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDPool compileXD(java.util.Properties, java.lang.Object...) throws org.xdef.sys.SRuntimeException;
    public Response compileXD6 (BinaryDataReader reader) throws IOException
    {
        Properties props = readProperties(reader);
        Object[] sources = readObjectArgs(reader);
        XDPool pool = XDFactory.compileXD(props, sources);
        XDPoolWrapper wrap = new XDPoolWrapper(client, pool);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDPool compileXD(org.xdef.sys.ReportWriter, java.util.Properties, java.lang.Object...) throws org.xdef.sys.SRuntimeException;
    public Response compileXD7 (BinaryDataReader reader) throws IOException
    {
        ReportWriter rw = (ReportWriter) client.getLocalObject(reader.readInt());
        Properties props = readProperties(reader);
        Object[] sources = readObjectArgs(reader);
        XDPool pool = XDFactory.compileXD(rw, props, sources);
        XDPoolWrapper wrap = new XDPoolWrapper(client, pool);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDDocument xparse(java.io.InputStream, org.xdef.sys.ReportWriter) throws org.xdef.sys.SRuntimeException;
    public Response xparse1 (BinaryDataReader reader) throws IOException
    {
        InputStream inputStream = new RemoteInputStream(new RemoteStreamWrapper(client, reader.readInt()));
        ReportWriter rw = (ReportWriter) client.getLocalObject(reader.readInt());
        XDDocument xdDocument = XDFactory.xparse(inputStream, rw);
        XDDocumentWrapper wrap = new XDDocumentWrapper(client, xdDocument);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDDocument xparse(java.lang.String, org.xdef.sys.ReportWriter) throws org.xdef.sys.SRuntimeException;
    public Response xparse2 (BinaryDataReader reader) throws IOException
    {
        String str = reader.readSharpString();
        ReportWriter rw = (ReportWriter) client.getLocalObject(reader.readInt());
        XDDocument xdDocument = XDFactory.xparse(str, rw);
        XDDocumentWrapper wrap = new XDDocumentWrapper(client, xdDocument);
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDInput createXDInput(java.io.InputStream, boolean);
    public Response createXDInput1 (BinaryDataReader reader) throws IOException
    {
        InputStream inputStream = new RemoteInputStream(new RemoteStreamWrapper(client, reader.readInt()));
        XDInputWrapper wrap = new XDInputWrapper(client, XDFactory.createXDInput(inputStream, reader.readBoolean()));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDInput createXDInput(java.io.InputStreamReader, boolean);
    public Response createXDInput2 (BinaryDataReader reader) throws IOException
    {
        // Not yet implemented
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDInput createXDInput(org.xdef.sys.ReportReader);
    public Response createXDInput3 (BinaryDataReader reader) throws IOException
    {
        ReportReader reportReader = (ReportReader) client.getLocalObject(reader.readInt());
        XDInputWrapper wrap = new XDInputWrapper(client, XDFactory.createXDInput(reportReader));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDOutput createXDOutput(org.xdef.sys.ReportWriter);
    public Response createXDOutput1 (BinaryDataReader reader) throws IOException
    {
        ReportWriter reportWriter = (ReportWriter) client.getLocalObject(reader.readInt());
        XDOutputWrapper wrap = new XDOutputWrapper(client, XDFactory.createXDOutput(reportWriter));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDOutput createXDOutput(java.io.Writer, boolean);
    public Response createXDOutput2 (BinaryDataReader reader) throws IOException
    {
        // Not implemented yet
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDOutput createXDOutput(java.io.PrintStream);
    public Response createXDOutput3 (BinaryDataReader reader) throws IOException
    {
        // Not yet implemented
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDElement createXDElement(org.w3c.dom.Element);
    public Response createXDElement (BinaryDataReader reader) throws IOException
    {
        Element element = reader.readElement();
        XDElementWrapper wrap = new XDElementWrapper(client, XDFactory.createXDElement(element));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static org.xdef.XDNamedValue createXDNamedValue(java.lang.String, java.lang.Object);
    public Response createXDNamedValue (BinaryDataReader reader) throws IOException
    {
        // not yet impelemented
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDContainer createXDContainer();
    public Response createXDContainer1 (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDContainer createXDContainer(java.lang.Object);
    public Response createXDContainer2 (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDService createSQLService(java.lang.String, java.lang.String, java.lang.String) throws org.xdef.sys.SRuntimeException;
    public Response createSQLService1 (BinaryDataReader reader) throws IOException
    {
        XDServiceWrapper wrap = new XDServiceWrapper(client, XDFactory.createSQLService(reader.readSharpString(), reader.readSharpString(), reader.readSharpString()));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDService createSQLService(java.sql.Connection) throws org.xdef.sys.SRuntimeException;
    public Response createSQLService2 (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDResultSet createXDResultSet(java.sql.ResultSet);
    public Response createXDResultSet1 (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDResultSet createXDResultSet(java.lang.String, java.sql.ResultSet);
    public Response createXDResultSet2 (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDXmlOutStream createXDXmlOutStream(java.io.Writer, java.lang.String, boolean);
    public Response createXDXmlOutStream1 (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDXmlOutStream createXDXmlOutStream(java.lang.String, java.lang.String, boolean) throws java.io.IOException;
    public Response createXDXmlOutStream2 (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDParseResult createParseResult(java.lang.String);
    public Response createParseResult (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static org.xdef.XDValue createXDValue(java.lang.Object);
    public Response createXDValue (BinaryDataReader reader) throws IOException
    {
        // Read params here
        // Do actions
        BinaryDataBuilder builder = new BinaryDataBuilder();
        // return new Response(builder.build());
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static final void writeXDPool(java.io.OutputStream, org.xdef.XDPool) throws java.io.IOException;
    public Response writeXDPool1 (BinaryDataReader reader) throws IOException
    {
        OutputStream os = new RemoteOutputStream(new RemoteStreamWrapper(client, reader.readInt()));
        XDPool pool = ((XDPoolWrapper) client.getLocalObject(reader.readInt())).getXdPool();
        XDFactory.writeXDPool(os, pool);
        return new EmptyResponse();
    }


    // Autogenerated method
    //  public static final void writeXDPool(java.io.File, org.xdef.XDPool) throws java.io.IOException;
    public Response writeXDPool2 (BinaryDataReader reader) throws IOException
    {
        File f = new File(reader.readSharpString());
        XDPool pool = ((XDPoolWrapper) client.getLocalObject(reader.readInt())).getXdPool();
        XDFactory.writeXDPool(f, pool);
        return new EmptyResponse();
    }


    // Autogenerated method
    //  public static final void writeXDPool(java.lang.String, org.xdef.XDPool) throws java.io.IOException;
    public Response writeXDPool3 (BinaryDataReader reader) throws IOException
    {
        // Not needed, remote passes as File version
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static final org.xdef.XDPool readXDPool(java.io.InputStream) throws java.io.IOException;
    public Response readXDPool1 (BinaryDataReader reader) throws IOException
    {
        InputStream inputStream = new RemoteInputStream(new RemoteStreamWrapper(client, reader.readInt()));
        XDPoolWrapper wrap = new XDPoolWrapper(client, XDFactory.readXDPool(inputStream));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static final org.xdef.XDPool readXDPool(java.io.File) throws java.io.IOException;
    public Response readXDPool2 (BinaryDataReader reader) throws IOException
    {
        File f = new File(reader.readSharpString());
        XDPoolWrapper wrap = new XDPoolWrapper(client, XDFactory.readXDPool(f));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    // Autogenerated method
    //  public static final org.xdef.XDPool readXDPool(java.lang.String) throws java.io.IOException;
    public Response readXDPool3 (BinaryDataReader reader) throws IOException
    {
        // Implemented at remote side by calling previous function
        throw new UnsupportedOperationException();
    }


    // Autogenerated method
    //  public static final org.xdef.XDPool readXDPool(java.net.URL) throws java.io.IOException;
    public Response readXDPool4 (BinaryDataReader reader) throws IOException
    {
        URL url = new URL(reader.readSharpString());
        XDPoolWrapper wrap = new XDPoolWrapper(client, XDFactory.readXDPool(url));
        BinaryDataBuilder builder = new BinaryDataBuilder();
        builder.add(client.registerRemoteObject(wrap));
        return new Response(builder.build());
    }


    private Properties readProperties(final BinaryDataReader reader) {
        try {
            final Properties props = new Properties();
            final int propCount = reader.readInt();
            if (propCount == 0)
                return null;
            for (int i = 0; i < propCount; i++) {
                final String key = reader.readSharpString();
                final String value = reader.readSharpString();
                props.setProperty(key, value);
            }
            return props;
        } catch (final IOException ex) {
            return null;
        }
    }

    private Object[] readObjectArgs(final BinaryDataReader reader) throws IOException {
        final int paramCount = reader.readInt();
        final Object[] res = new Object[paramCount];
        for (int i = 0; i < paramCount; i++) {
            final int objectType = reader.readInt();
            switch (objectType) {
                case OBJECT_TYPE_FILE:
                    res[i] = new File(reader.readSharpString());
                    break;
                case OBJECT_TYPE_STREAM:
                    res[i] = new RemoteInputStream(new RemoteStreamWrapper(client, reader.readInt()));
                    break;
                case OBJECT_TYPE_STRING:
                    res[i] = reader.readSharpString();
                    break;
                case OBJECT_TYPE_URL:
                    res[i] = new URL(reader.readSharpString());
                    break;
                default:
                    throw new IIOException("Invalid parameter type.");
            }
        }
        return res;
    }

}
