package org.xdef.bridge.wrappers;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

import javax.naming.OperationNotSupportedException;

import org.xdef.XDBuilder;
import org.xdef.bridge.remoteObjects.RemoteHandlingObject;
import org.xdef.bridge.server.Client;
import org.xdef.bridge.server.requests.Request;
import org.xdef.bridge.server.requests.Response;
import org.xdef.bridge.server.requests.ResponseException;
import org.xdef.bridge.utils.BinaryDataBuilder;
import org.xdef.bridge.utils.BinaryDataReader;
import org.xdef.bridge.wrappers.streams.RemoteInputStream;
import org.xdef.bridge.wrappers.streams.RemoteStreamWrapper;

public class XDBuilderWrapper extends RemoteHandlingObject {

    private static final int FUNCTION_SETSOURCE_1 = 1;
    private static final int FUNCTION_SETSOURCE_2 = 2;
    private static final int FUNCTION_SETSOURCE_3 = 3;
    private static final int FUNCTION_SETSOURCE_4 = 4;
    private static final int FUNCTION_SETSOURCE_5 = 5;
    private static final int FUNCTION_SETSOURCE_6 = 6;
    private static final int FUNCTION_SETSOURCE_7 = 7;
    private static final int FUNCTION_SETCLASSLOADER = 8;
    private static final int FUNCTION_SETEXTERNALS = 9;
    private static final int FUNCTION_COMPILEXD = 10;

    private XDBuilder xdBuilder;

    public XDBuilderWrapper(Client client, XDBuilder xdBuilder) {
        super(client);
        this.xdBuilder = xdBuilder;
        
    }

     // Autogenerated handler method
     @Override
     public Response handleRequest(final Request request) {
         final BinaryDataReader reader = request.getReader();
         try {
             switch (request.getFunction()) {
 
                 case FUNCTION_SETSOURCE_1:
                     return setSource1(reader);
                 case FUNCTION_SETSOURCE_2:
                     return setSource2(reader);
                 case FUNCTION_SETSOURCE_3:
                     return setSource3(reader);
                 case FUNCTION_SETSOURCE_4:
                     return setSource4(reader);
                 case FUNCTION_SETSOURCE_5:
                     return setSource5(reader);
                 case FUNCTION_SETSOURCE_6:
                     return setSource6(reader);
                 case FUNCTION_SETSOURCE_7:
                     return setSource7(reader);
                 case FUNCTION_SETCLASSLOADER:
                     return setClassLoader(reader);
                 case FUNCTION_SETEXTERNALS:
                     return setExternals(reader);
                 case FUNCTION_COMPILEXD:
                     return compileXD(reader);
                 default:
                     return new ResponseException(ResponseException.ERROR_CODE_UNKNOWN_FUNCTION, "XDFactory: Unknown function.");
             }
         } catch (final Exception ex) {
             return new ResponseException(ResponseException.ERROR_CODE_INVALID_REQUEST, ex.getMessage());
         }
     }
 
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setSource(java.lang.String, java.lang.String)
     private Response setSource1 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         String arg1 = reader.readSharpString();
         String arg2 = reader.readSharpString();
         // Do actions
         XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setSource(arg1,arg2));
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(client.registerRemoteObject(wrap));
         return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setSource(java.lang.String...)
     private Response setSource2 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         String[]arg1 = reader.readSharpStringArray();
         // Do actions
         XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setSource(arg1));
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(client.registerRemoteObject(wrap));
         return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setSource(java.lang.String[], java.lang.String[])
     private Response setSource3 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         String[] arg1 = reader.readSharpStringArray();
         String[] arg2 = reader.readSharpStringArray();
         // Do actions
         XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setSource(arg1,arg2));
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(client.registerRemoteObject(wrap));
         return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setSource(java.io.File...)
     private Response setSource4 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         File[] arg1 = reader.readFileArray();
         // Do actions
         XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setSource(arg1));
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(client.registerRemoteObject(wrap));
         return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setSource(java.net.URL...)
     private Response setSource5 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         URL[] arg1 = reader.readUrlArray();
         // Do actions
         XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setSource(arg1));
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(client.registerRemoteObject(wrap));
         return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setSource(java.io.InputStream, java.lang.String)
     private Response setSource6 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         InputStream arg1 = new RemoteInputStream(new RemoteStreamWrapper(client, reader.readInt()));
         String arg2 = reader.readSharpString();
         // Do actions
         XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setSource(arg1,arg2));
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(client.registerRemoteObject(wrap));
         return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setSource(java.io.InputStream[], java.lang.String[])
     private Response setSource7 (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         int streamCnt = reader.readInt();
         InputStream[] arg1 = new InputStream[streamCnt];
         for (int i = 0; i < streamCnt; i++) {
             arg1[0] = new RemoteInputStream(new RemoteStreamWrapper(client, reader.readInt()));
         }
         String[] arg2 = reader.readSharpStringArray();
         // Do actions
         XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setSource(arg1,arg2));
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(client.registerRemoteObject(wrap));
         return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setClassLoader(java.lang.ClassLoader)
     private Response setClassLoader (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         throw new OperationNotSupportedException();
        //  // Read params here
        //  ClassLoader arg1 = reader.readClassLoader();
        //  // Do actions
        //  XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setClassLoader(arg1));
        //  BinaryDataBuilder builder = new BinaryDataBuilder();
        //  builder.add(client.registerRemoteObject(wrap));
        //  return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDBuilder setExternals(java.lang.Class<?>...)
     private Response setExternals (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         throw new OperationNotSupportedException();
        //  // Read params here
        //  Class<?>... arg1 = reader.readClass<?>...();
        //  // Do actions
        //  XDBuilderWrapper wrap = new XDBuilderWrapper(client, xdBuilder.setExternals(arg1));
        //  BinaryDataBuilder builder = new BinaryDataBuilder();
        //  builder.add(client.registerRemoteObject(wrap));
        //  return new Response(builder.build());
     }
 
     // Autogenerated method
     // public abstract org.xdef.XDPool compileXD()
     private Response compileXD (BinaryDataReader reader) throws IOException, OperationNotSupportedException
     {
         // Read params here
         // Do actions
         XDPoolWrapper wrap = new XDPoolWrapper(client, xdBuilder.compileXD());
         BinaryDataBuilder builder = new BinaryDataBuilder();
         builder.add(client.registerRemoteObject(wrap));
         return new Response(builder.build());
     }
 
    
}