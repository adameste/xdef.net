<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xdef.net</name>
    </assembly>
    <members>
        <member name="T:xdef.net.Proc.XXNode">
            <summary>Interface of models in X-definition.</summary>
            <author>Vaclav Trojan</author>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetXXName">
            <summary>Get name of the model.</summary>
            <returns>The name of node.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetXXNSURI">
            <summary>Get namespace URI of the model.</summary>
            <returns>namespace URI or <tt>null</tt>.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetNodeName">
            <summary>Get name of actual node.</summary>
            <returns>The name of node.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetNodeURI">
            <summary>Get namespace URI of actual node.</summary>
            <returns>namespace URI or <tt>null</tt>.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetXPos">
            <summary>Get position of the node as a XPath expression string.</summary>
            <returns>position of the node as a XPath expression string.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetParent">
            <summary>Return parent node.</summary>
            <returns>The parent node.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetChildXXNodes">
            <summary>Get array of XXNodes or null.</summary>
            <returns>array of XXNodes or null.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetXDDocument">
            <summary>Get XDDocument.</summary>
            <returns>XDDocument.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetXDPool">
            <summary>Get XDPool.</summary>
            <returns>XDPool.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetXDPosition">
            <summary>Get XDPosition of the processed element.</summary>
            <returns>XDPosition of the processed element.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetVariableNames">
            <summary>Get names of global variables.</summary>
            <returns>array of names of variables.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.SetVariable(System.String,System.Int64)">
            <summary>Set variable.</summary>
            <param name="name">name name of variable.</param>
            <param name="value">value to be set to the variable.</param>
        </member>
        <member name="M:xdef.net.Proc.XXNode.SetVariable(System.String,System.Double)">
            <summary>Set integer variable.</summary>
            <param name="name">name name of variable.</param>
            <param name="value">value to be set to the variable.</param>
        </member>
        <member name="M:xdef.net.Proc.XXNode.SetVariable(System.String,System.Boolean)">
            <summary>Set boolean variable.</summary>
            <param name="name">name name of variable.</param>
            <param name="value">value to be set to the variable.</param>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetReportWriter">
            <summary>Get report reader created from the reporter assigned to XDDocument.</summary>
            <returns>report reader.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.ErrorWarnings">
            <summary>Check if errors, fatal errors, light errors or warnings were reported.</summary>
            <returns>
            <tt>true</tt> if and only if errors, fatal errors, light errors
            or warnings were reported.
            </returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.Errors">
            <summary>Check if errors, fatal errors or light errors were reported.</summary>
            <returns>
            <tt>true</tt> if and only if errors, fatal errors or light errors
            were reported.
            </returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.GetTemporaryReporter">
            <summary>Get temporary reporter used by XD processor.</summary>
            <returns>ArrayReporter used as temporary reporter.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.SetTemporaryReporter(xdef.net.Sys.ArrayReporter)">
            <summary>Set new temporary reporter.</summary>
            <param name="reporter">new temporary reporter.</param>
            <returns>ArrayReporter old temporary reporter.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.ClearTemporaryReporter">
            <summary>Clear temporary reporter.</summary>
        </member>
        <member name="M:xdef.net.Proc.XXNode.RemoveTemporaryReport(xdef.net.Sys.Report)">
            <summary>Remove report from temporary reporter.</summary>
            <param name="rep">report to be removed.</param>
            <returns>true if report was found and removed.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.CopyTemporaryReports">
            <summary>Copy temporary reports to global reporter.</summary>
            <returns>
            true if and only if temporary reporter contained errors before it
            was cleared.
            </returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.PutTemporaryReport(xdef.net.Sys.Report)">
            <summary>Put message to temporary reporter.</summary>
            <param name="message">report to be added to the temporary reporter.</param>
        </member>
        <member name="M:xdef.net.Proc.XXNode.ChkTemporaryErrors">
            <summary>Check if temporary reporter has errors.</summary>
            <returns>true if temporary reporter has errors.</returns>
        </member>
        <member name="M:xdef.net.Proc.XXNode.SetXDContext(System.Xml.Linq.XNode)">
            <summary>Set source element as context for create mode.</summary>
            <param name="node">XML node.</param>
        </member>
        <member name="M:xdef.net.Proc.XXNode.SetXDContext(System.String)">
            <summary>Set source element as context for create mode.</summary>
            <param name="source">string with pathname, URL or source of XML node.</param>
        </member>
        <member name="T:xdef.net.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:xdef.net.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:xdef.net.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:xdef.net.Properties.Resources.xdef_bridge">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="F:xdef.net.Sys.Report.STRING">
            <summary>Text report object (byte value of the character 'S').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.TEXT">
            <summary>Text report object (byte value of the character 'T').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.AUDIT">
            <summary>Audit report object (byte value of the character 'A').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.MESSAGE">
            <summary>Message report object (byte value of the character 'M').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.INFO">
            <summary>Info report object (byte value of the character 'I').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.WARNING">
            <summary>Warning report object (byte value of the character 'W').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.LIGHTERROR">
            <summary>Light error report object (byte value of the character 'L').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.ERROR">
            <summary>LightError report object (byte value of the character 'E').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.FATAL">
            <summary>Fatal error report object (byte value of the character 'F').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.EXCEPTION">
            <summary>Exception report object (byte value of the character 'X').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.TRACE">
            <summary>Trace report object (byte value of the character 'D').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.KILL">
            <summary>Kill report object (byte value of the character 'K').</summary>
        </member>
        <member name="F:xdef.net.Sys.Report.UNDEF">
            <summary>Undefined report object (byte value of the character 'U').</summary>
        </member>
        <member name="P:xdef.net.Sys.ReportReader.Report">
            <summary>Get next report from the list or null.</summary>
            <returns>The report or null.</returns>
        </member>
        <member name="M:xdef.net.Sys.ReportReader.Close">
            <summary>Close the report stream.</summary>
        </member>
        <member name="M:xdef.net.Sys.ReportReader.PrintReports(System.IO.Stream)">
            <summary>Write reports to output stream.</summary>
            <param name="out">The PrintStream where reports are printed.</param>
        </member>
        <member name="M:xdef.net.Sys.ReportReader.PrintReports(System.IO.Stream,System.String)">
            <summary>Write reports to output stream.</summary>
            <param name="language">language id (ISO-639).</param>
            <param name="out">The PrintStream where reports are printed.</param>
        </member>
        <member name="M:xdef.net.Sys.ReportReader.PrintToString">
            <summary>Write reports to String (in actual language).</summary>
            <returns>the String with reports.</returns>
        </member>
        <member name="M:xdef.net.Sys.ReportReader.PrintToString(System.String)">
            <summary>Write reports to String in specified language.</summary>
            <param name="language">language id (ISO-639).</param>
            <returns>the String with reports.</returns>
        </member>
        <member name="M:xdef.net.Sys.ReportReader.WriteReports(xdef.net.Sys.ReportWriter)">
            <summary>Write reports from this reporter reader to report writer.</summary>
            <param name="reporter">OutputStreamWriter where to write,</param>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.Language">
            <summary>Language (ISO-639 or ISO-639-2).</summary>
            <remarks>
            Set language (ISO-639 or ISO-639-2). This method takes an effect only if
            the reporter output is printed as a text to the output stream.
            </remarks>
            <value name="language">language id (ISO-639).</value>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.LastErrorReport">
            <summary>Get last error report.</summary>
            <value>
            last error report (or <tt>null</tt> if last report is not
            available).
            </value>
        </member>
        <member name="M:xdef.net.Sys.ReportWriter.ClearLastErrorReport">
            <summary>Clear last error report.</summary>
            <remarks>
            Clear last error report. If last report has been available it will be
            erased (i.e. result of <tt>getLastReport()</tt> will be null. However,
            the report has already been written to the report file.
            </remarks>
        </member>
        <member name="M:xdef.net.Sys.ReportWriter.ClearCounters">
            <summary>Clear counters of fatal errors, errors and warnings.</summary>
        </member>
        <member name="M:xdef.net.Sys.ReportWriter.Clear">
            <summary>Clear the report file.</summary>
            <remarks>
            Clear the report file. All report items will be erased from the file.
            Also last error report is cleared.
            throws KException if it is not possible to clear reports.
            </remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.Size">
            <summary>Get total number of reports.</summary>
            <remarks>The number of generated reports.</remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.Fatals">
            <summary>Check if fatal errors were generated.</summary>
            <remarks>true is errors reports are present.</remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.Errors">
            <summary>Check if errors and/or fatal errors were generated.</summary>
            <remarks>true is errors reports are present.</remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.ErrorWarnings">
            <summary>Check if warnings and/or errors and/or fatal errors were generated.</summary>
            <remarks>true is warnings or errors reports are present.</remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.FatalErrorCount">
            <summary>Get number of fatal items.</summary>
            <remarks>The number of generated fatal errors.</remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.ErrorCount">
            <summary>Get number of error items.</summary>
            <remarks>The number of errors.</remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.LightErrorCount">
            <summary>Get number of light error items.</summary>
            <remarks>The number of light errors.</remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.WarningCount">
            <summary>Get number of warning items.</summary>
            <remarks>The number of generated warnings.</remarks>
        </member>
        <member name="P:xdef.net.Sys.ReportWriter.ReportReader">
            <summary>
            Closes the reportWriter and creates report reader for reading created
            report data.
            </summary>
            <remarks>
            Closes the reportWriter and creates report reader for reading created
            report data. If reader can't be created the SRuntimeException is thrown.
            </remarks>
            <returns>report reader created from report writer.</returns>
        </member>
        <member name="M:xdef.net.Sys.ReportWriter.Close">
            <summary>Close report writer.</summary>
        </member>
        <member name="M:xdef.net.Sys.ReportWriter.CheckAndThrowErrors">
            <summary>Check error reports stored in report writer.</summary>
            <remarks>
            Check error reports stored in report writer. Return normally if
            in no errors are found, otherwise throw exception with list of
            error messages (max. MAX_REPORTS messages).
            </remarks>
            <exception cref="T:xdef.net.Sys.SRuntimeException">if errors has been generated.</exception>
            <exception cref="!:org.xdef.sys.SRuntimeException"/>
        </member>
        <member name="M:xdef.net.Sys.ReportWriter.CheckAndThrowErrorWarnings">
            <summary>Check if error and warning reports were stored in report writer.</summary>
            <remarks>
            Check if error and warning reports were stored in report writer. Return
            normally if in no errors or warnings are found, otherwise throw
            exception with the  list of error messages (max. MAX_REPORTS messages).
            </remarks>
            <exception cref="T:xdef.net.Sys.SRuntimeException">if errors or warnings has been generated.</exception>
            <exception cref="!:org.xdef.sys.SRuntimeException"/>
        </member>
        <member name="M:xdef.net.Sys.ReportWriter.AddReports(xdef.net.Sys.ReportReader)">
            <summary>Add to this reporter reports from report reader.</summary>
            <param name="reporter">report reader with reports to be added.</param>
        </member>
        <member name="T:xdef.net.Utils.FilePath">
            <summary>
            Class used as placeholder for java File class, required to distinguish between files and strings.
            Paths passed to Java are expended to fullpaths.
            </summary>
        </member>
        <member name="P:xdef.net.Utils.FilePath.Path">
            <summary>
            Relative or absolute path to file.
            </summary>
        </member>
        <member name="P:xdef.net.Utils.FilePath.Exists">
            <summary>
            true if this path leads to an existing file.
            </summary>
        </member>
        <member name="M:xdef.net.Utils.FilePath.#ctor(System.String)">
            <summary>
            Initialize an instance of FilePath
            </summary>
            <param name="path">Relative or absolute path to file.</param>
        </member>
        <member name="T:xdef.net.XDBuilder">
            <summary>
            Provides building of
            <see cref="T:xdef.net.XDPool"/>
            . This object you need to
            use only in special case you want to make incremental building of
            <see cref="T:xdef.net.XDPool"/>
            . In most of cases you can create
            <see cref="T:xdef.net.XDPool"/>
            with static methods of
            <see cref="T:xdef.net.XDFactory"/>
            .
            <p>Typical use of XDBuilder:</p>
            <pre><tt>
            // 1. Create XDBuilder with properties.
            Properties props = new Properties();
            props.setProperty(key, value); //see
            <see cref="T:xdef.net.XDConstants"/>
            ...
            XDBuilder buider = XDFactory.getXDBuilder(props);
            builder.setClassLoader(classloader); // set class loader for externals
            builder.setReporter(reporter); // set reporter for builder error reports
            builder.setExternals(externals); // set external objects
            ...
            builder.setSource(source 1); //compile source with X-definition
            ...
            builder.setSource(source n); //compile source with X-definition
            ...
            XDPool xd = builder.compileXD(); //build XDPool
            ...
            </tt></pre>
            </summary>
            <author>Vaclav Trojan</author>
        </member>
        <member name="M:xdef.net.XDBuilder.SetSource(System.String,System.String)">
            <summary>Add source data of X-definition or collection.</summary>
            <remarks>
            Add source data of X-definition or collection. If the argument starts
            with "&lt;" character then it is interpreted as source X-definition data,
            otherwise it can be the pathname of the file or URL. If it is a pathname
            format then it may contain also wildcard characters representing a group
            of files.
            </remarks>
            <param name="source">The string with source X-definition.</param>
            <param name="sourceId">
            name of source source data corresponding to
            the argument source (may be null).
            </param>
            <returns>this XDBuilde object.</returns>
        </member>
        <member name="M:xdef.net.XDBuilder.SetSource(System.String[])">
            <summary>Add source data of X-definitions or collections.</summary>
            <remarks>
            Add source data of X-definitions or collections. If an item starts with
            "&lt;" character then it is interpreted as source data, otherwise
            it can be the pathname of the file or URL. If it is a pathname format,
            then it may contain also wildcard characters representing a group
            of files.
            </remarks>
            <param name="sources">The string with sources.</param>
            <returns>this XDBuilde object.</returns>
        </member>
        <member name="M:xdef.net.XDBuilder.SetSource(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Add source data of X-definitions or collections.</summary>
            <remarks>
            Add source data of X-definitions or collections. If an item starts with
            "&lt;" character then it is interpreted as source data, otherwise
            it can be the pathname of the file or URL. If it is a pathname format,
            then it may contain also wildcard characters representing a group
            of files.
            </remarks>
            <param name="sources">The string with sources.</param>
            <param name="sourceIds">
            array of names of source source data corresponding to
            the sources argument (any item or even this argument
            may be <tt>null</tt>).
            </param>
            <returns>this XDBuilde object.</returns>
        </member>
        <member name="M:xdef.net.XDBuilder.SetSource(xdef.net.Utils.FilePath[])">
            <summary>Add files with source data of  X-definitions or collections.</summary>
            <param name="sources">array of files with sources.</param>
            <returns>this XDBuilde object.</returns>
        </member>
        <member name="M:xdef.net.XDBuilder.SetSource(System.Uri[])">
            <summary>Add URLs with source data of X-definitions or collections.</summary>
            <param name="sources">array of URLs with sources.</param>
            <returns>this XDBuilde object.</returns>
        </member>
        <member name="M:xdef.net.XDBuilder.SetSource(System.IO.Stream,System.String)">
            <summary>Add input stream with source data of a X-definition or collection.</summary>
            <param name="source">The input stream with source.</param>
            <param name="sourceId">
            name of source source data corresponding to
            stream (may be null).
            </param>
            <returns>this XDBuilde object.</returns>
        </member>
        <member name="M:xdef.net.XDBuilder.SetSource(System.Collections.Generic.IEnumerable{System.IO.Stream},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Add input streams with sources data of X-definitions or collections.</summary>
            <param name="sources">array of input streams with sources.</param>
            <param name="sourceIds">
            array of names of source source data corresponding to
            streams from the argument sources (any item or even this argument
            may be <tt>null</tt>).
            </param>
            <returns>this XDBuilde object.</returns>
        </member>
        <member name="M:xdef.net.XDBuilder.CompileXD">
            <summary>Compile XDefPool from prepared sources.</summary>
            <returns>compiled XDefPool.</returns>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_DEBUG">
            <summary>Property defines debug mode (default is false).</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_DEBUG_TRUE">
            <summary>Value "true" of property "xdef_debug"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_DEBUG_FALSE">
            <summary>Value "false" of property "xdef_debug"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_DEBUG_SHOWRESULT">
            <summary>Value "showResult" of property "xdef_debug"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_DEBUG_OUT">
            <summary>Property defines stream used for debug output (default is stdOut).</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_DEBUG_IN">
            <summary>Property defines stream used for debug input (default is stdIn).</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_DEBUG_EDITOR">
            <summary>Property defines debug editor class name.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_XDEF_EDITOR">
            <summary>Property defines X-definition editor class name.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_XDEF_EXTEDITOR">
            <summary>Property defines X-definition external editor class name.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_DOCTYPE">
            <summary>Property defines if XML DOCTYPE is permitted (default is "true").</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_DOCTYPE_FALSE">
            <summary>Value "false" of property "xdef_doctype"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_DOCTYPE_TRUE">
            <summary>Value "true" of property "xdef_doctype"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_LOCATIONDETAILS">
            <summary>Set the XML parser will generate detailed location in reports.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_LOCATIONDETAILS_FALSE">
            <summary>Value "false" of property "xdef_locationsdetails" (default).</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_LOCATIONDETAILS_TRUE">
            <summary>Value "true" of property "xdef_locationsdetails"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_XINCLUDE">
            <summary>Property defines if XML include is permitted (default is "true").</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_XINCLUDE_FALSE">
            <summary>Value "false" of property "xdef_xinclude"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_XINCLUDE_TRUE">
            <summary>Value "true" of property "xdef_xinclude (default)."</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_WARNINGS">
            <summary>Property warning messages are checked {thrown} (default is "false")</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_WARNINGS_TRUE">
            <summary>Value "true" of property "xdef_warnings"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_WARNINGS_FALSE">
            <summary>Value "false" of property "xdef_warnings"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_DISPLAY">
            <summary>Property defines debug mode (default is false).</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_DISPLAY_TRUE">
            <summary>Value "true" of property "xdef_display"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_DISPLAY_ERRORS">
            <summary>Value "errors" of property "xdef_display"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_DISPLAY_FALSE">
            <summary>Value "false" of property "xdef_display"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_MINYEAR">
            <summary>Property defines minimal valid year of date (default is no minimum).</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_MAXYEAR">
            <summary>Property defines maximal valid year of date (default is no maximum).</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_SPECDATES">
            <summary>Property defines legal values of dates if year is out of range.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_IGNORE_UNDEF_EXT">
            <summary>
            Property defines if unresolved external methods are reported (used
            for syntax checking of X-definition (default is "false").
            </summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_IGNORE_UNDEF_EXT_TRUE">
            <summary>Value "true" of property "xdef_ignoreUnresolvedExternals"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTYVALUE_IGNORE_UNDEF_EXT_FALSE">
            <summary>Value "false" of property "xdef_ignoreUnresolvedExternals"</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_MESSAGES">
            <summary>Prefix of property names for setting of message table files.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDPROPERTY_MSGLANGUAGE">
            <summary>Name of property for setting language of messages.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XLINK_NS_URI">
            <summary>URI of w3c XLink</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XINCLUDE_NS_URI">
            <summary>URI of w3c XInclude</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDEF_NS_PREFIX">
            <summary>Recommended namespace prefix used for X-definition nodes.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDEF20_NS_URI">
            <summary>URI of X-definition 2.0.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDEF31_NS_URI">
            <summary>URI of X-definition 3.1.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDEF32_NS_URI">
            <summary>URI of X-definition 3.2.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDEF40_NS_URI">
            <summary>URI of X-definition 4.0.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.XDEF_INSTANCE_NS_URI">
            <summary>The namespace URI for X-definition instance.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.JSON_NS_PREFIX">
            <summary>Recommended namespace prefix used for JSON/XML conversion nodes.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.JSON_NS_URI">
            <summary>URI of JSON/XML X-definition conversion.</summary>
        </member>
        <member name="F:xdef.net.XDConstants.JSON_NS_URI_W3C">
            <summary>URI of JSON/XML W3C conversion (https://www.w3.org/TR/xslt-30/#json).</summary>
        </member>
        <member name="F:xdef.net.XDConstants.LINE_SEPARATOR">
            <summary>Platform-dependent line separator (newline characters: LF, CR LF, etc.</summary>
        </member>
        <member name="T:xdef.net.XDDocument">
            <summary>Provides processing of given X-definition.</summary>
            <remarks>
            Provides processing of given X-definition. For processing of X-definition you
            must create and instance of XDDocument created from XDPool with given
            X-definition in which is defined root (starting point) for next processing.
            Before starting of process you can set parameters of processing (variables,
            properties, standard input and output streams, user objects). The document
            can be used for validation and processing of the input XML data ("xparse"
            methods) or for construction of a XML object (methods "xcreate"). Note that
            XDDocument is the root node of processing and it is the extension of
            the interface
            <see cref="T:xdef.net.Proc.XXNode"/>
            . You can read of or set to
            variables of a XDPool by methods of
            <see cref="T:xdef.net.Proc.XXNode"/>
            :
            <p>
            <see cref="!:XXNode.getVariable(string)"/>
            ,
            <see cref="!:XXNode.setVariable(string, object)"/>
            ,
            <see cref="!:XXNode.setUserObject(object)"/>
            ,
            <see cref="!:XXNode.getUserObject()"/>
            ,
            <see cref="!:XXNode.getUserObject()"/>
            ,
            <see cref="!:XXNode.setXDContext(org.w3c.dom.Node)"/>
            .
            <see cref="!:XXNode.getXDContext()"/>
            .</p>
            <p>Typical example of validation:</p>
            <pre><tt>
            //get instance of XDDocument with X-definition given by name
            XDDocument xDoc = xp.createXDDocument(name);
            ArrayReporter reporter = new ArrayReporter(); // here will be written errors
            ... set variables if necessary - see
            <see cref="T:xdef.net.Proc.XXNode"/>
            Element el = xd.xparse(sourceXml, reporter); //validate and process data
            //now we have root element of parsed source data errors in variable el
            //and list of errors in reporter
            //test if an error was reported
            if (reporter.errorWarnings()) {//error or warning reported?
            reporter.getReportReader().printReports(System.err);
            } else {//no errors
            ... get variables if necessary - see
            <see cref="T:xdef.net.Proc.XXNode"/>
            ....
            }</tt></pre>
            <p>Typical example of construction:</p>
            <pre><tt>
            //get instance of XDDocument with X-definition given by name
            XDDocument xDoc = xp.createXDDocument(name);
            ArrayReporter reporter = new ArrayReporter(); // here will be written errors
            ... set data source see
            <see cref="T:xdef.net.Proc.XXNode"/>
            //construct required element.
            Element el = xd.xcreate(nsuri, //namespace of required model or null
            name, // name of required model (in given X-definition)
            reporter);
            </tt></pre>
            </remarks>
            <author>Štěpán Adámek</author>
        </member>
        <member name="M:xdef.net.XDDocument.SetProperties(xdef.net.Utils.Properties)">
            <summary>Set properties.</summary>
            <param name="props">Properties.</param>
        </member>
        <member name="M:xdef.net.XDDocument.SetProperty(System.String,System.String)">
            <summary>Set property.</summary>
            <remarks>
            Set property. If properties are null the new Properties object
            will be created.
            </remarks>
            <param name="key">name of property.</param>
            <param name="value">
            value of property or null. If the value is null the property
            is removed from properties.
            </param>
        </member>
        <member name="M:xdef.net.XDDocument.GetProperties">
            <summary>Get properties.</summary>
            <returns>assigned Properties.</returns>
        </member>
        <member name="M:xdef.net.XDDocument.IsCreateMode">
            <summary>Check if create mode is running.</summary>
            <returns>true if and only if create mode is running.</returns>
        </member>
        <member name="M:xdef.net.XDDocument.GetDocument">
            <summary>Get document.</summary>
            <returns>The Document object (may be null).</returns>
        </member>
        <member name="M:xdef.net.XDDocument.Xparse(System.String,xdef.net.Sys.ReportWriter)">
            <summary>Parse and process XML source and return org.w3c.dom.Element.</summary>
            <param name="xmlData">string with pathname of XML file or XML source data.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then SRuntimeException is thrown.
            </param>
            <returns>root element of parsed data.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xparse(System.String,System.String,xdef.net.Sys.ReportWriter)">
            <summary>Parse and process XML source and return org.w3c.dom.Element.</summary>
            <param name="xmlData">string with pathname of XML file or XML source data.</param>
            <param name="sourceId">name of source or null.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            null and error reports occurs then SRuntimeException is thrown.
            </param>
            <returns>root element of parsed data.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xparse(System.Uri,xdef.net.Sys.ReportWriter)">
            <summary>Parse and process XML source and return org.w3c.dom.Element.</summary>
            <param name="xmlData">URL pointing to XML source data.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then RemoteCallException is thrown.
            </param>
            <returns>root element of parsed data.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xparse(xdef.net.Utils.FilePath,xdef.net.Sys.ReportWriter)">
            <summary>Parse and process XML source and return org.w3c.dom.Element.</summary>
            <param name="xmlData">file with XML source data.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then RemoteCallException is thrown.
            </param>
            <returns>root element of parsed data.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xparse(System.Xml.Linq.XNode,xdef.net.Sys.ReportWriter)">
            <summary>Parse and process XML source and return org.w3c.dom.Element.</summary>
            <param name="xmlData">XML <tt>org.w3c.dom.Node</tt>.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then SRuntimeException is thrown.
            </param>
            <returns>root element of parsed data.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xparse(System.IO.Stream,xdef.net.Sys.ReportWriter)">
            <summary>Parse and process XML source and return org.w3c.dom.Element.</summary>
            <param name="xmlData">input stream with XML source data.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then SRuntimeException is thrown.
            </param>
            <returns>root element of parsed data.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xparse(System.IO.Stream,System.String,xdef.net.Sys.ReportWriter)">
            <summary>Parse and process XML source and return org.w3c.dom.Element.</summary>
            <param name="xmlData">input stream with XML source data.</param>
            <param name="sourceId">name of source or <tt>null</tt>.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then SRuntimeException is thrown.
            </param>
            <returns>root element of parsed data.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xcreate(System.String,xdef.net.Sys.ReportWriter)">
            <summary>Run create mode - create element according to the X-definition model.</summary>
            <param name="name">the name of model of required element.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then SRuntimeException is thrown.
            </param>
            <returns>root element of created XML document.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xcreate(System.String,System.String,xdef.net.Sys.ReportWriter)">
            <summary>Run create mode - create element according to the X-definition model.</summary>
            <remarks>
            Run create mode - create element according to the X-definition model.
            If the parameter nsUri is not <tt>null</tt> then its assigned the model
            with given namespaceURI; in this case the parameter name may be
            qualified with a prefix.
            </remarks>
            <param name="nsUri">the namespace URI of result element (may be <tt>null</tt>).</param>
            <param name="name">the name of model of required element (may contain prefix).</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then SRuntimeException is thrown.
            </param>
            <returns>root element of created XML document.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xcreate(System.Xml.XmlQualifiedName,xdef.net.Sys.ReportWriter)">
            <summary>Run create mode - create element according to the X-definition model.</summary>
            <param name="qname">the QName of model of required element.</param>
            <param name="reporter">
            report writer or <tt>null</tt>. If this argument is
            <tt>null</tt> and error reports occurs then SRuntimeException is thrown.
            </param>
            <returns>root element of created XML document.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if reporter is <tt>null</tt> and an error
            was reported.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.GetStdOut">
            <summary>get StdOut.</summary>
            <returns>std out XDOutput.</returns>
        </member>
        <member name="M:xdef.net.XDDocument.GetStdErr">
            <summary>get StdErr.</summary>
            <returns>std err XDOutput.</returns>
        </member>
        <member name="M:xdef.net.XDDocument.GetStdIn">
            <summary>get StdIn.</summary>
            <returns>std in XDInput.</returns>
        </member>
        <member name="M:xdef.net.XDDocument.SetStreamWriter(System.IO.Stream,System.String,System.Boolean)">
            <summary>Set XML writer.</summary>
            <param name="output">output stream.</param>
            <param name="encoding">encoding of output.</param>
            <param name="writeDocumentHeader">
            if true full document is written, otherwise
            only root element.
            </param>
            <exception cref="T:System.IO.IOException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDDocument.SetStdIn(System.IO.Stream)">
            <summary>Set standard input stream.</summary>
            <param name="input">InputStream object.</param>
        </member>
        <member name="M:xdef.net.XDDocument.SetStdOut(xdef.net.XDOutput)">
            <summary>Set standard output stream.</summary>
            <param name="output">XDOutput object.</param>
        </member>
        <member name="M:xdef.net.XDDocument.SetStdIn(xdef.net.XDInput)">
            <summary>Set standard input stream.</summary>
            <param name="input">XDInput object.</param>
        </member>
        <member name="M:xdef.net.XDDocument.SetDebug(System.Boolean)">
            <summary>Set debugging mode.</summary>
            <param name="debug">debugging mode.</param>
        </member>
        <member name="M:xdef.net.XDDocument.IsDebug">
            <summary>Check debugging mode is set ON.</summary>
            <returns>value of debugging mode.</returns>
        </member>
        <member name="M:xdef.net.XDDocument.GetImplProperties">
            <summary>Get implementation properties of X-definition.</summary>
            <returns>the implementation properties of X-definition.</returns>
        </member>
        <member name="M:xdef.net.XDDocument.GetImplProperty(System.String)">
            <summary>Get implementation property of X-definition.</summary>
            <param name="name">The name of property.</param>
            <returns>the value of implementation property from root X-definition.</returns>
        </member>
        <member name="M:xdef.net.XDDocument.GetMinYear">
            <summary>Get minimum valid year of date.</summary>
            <returns>minimum valid year (int.MinValue if not set).</returns>
        </member>
        <member name="M:xdef.net.XDDocument.SetMinYear(System.Int32)">
            <summary>Set minimum valid year of date (or int.MinValue is not set).</summary>
            <param name="x">minimum valid year.</param>
        </member>
        <member name="M:xdef.net.XDDocument.GetMaxYear">
            <summary>Get maximum valid year of date (or Integer.MIN if not set).</summary>
            <returns>maximum valid year (int.MinValue if not set).</returns>
        </member>
        <member name="M:xdef.net.XDDocument.SetMaxYear(System.Int32)">
            <summary>Set maximum valid year of date (or int.MinValue is not set).</summary>
            <param name="x">maximum valid year.</param>
        </member>
        <member name="M:xdef.net.XDDocument.CheckDateLegal(System.Boolean)">
            <summary>Set if year of date will be checked for interval minYear..maxYear.</summary>
            <param name="x">if true year of date will be checked.</param>
        </member>
        <member name="M:xdef.net.XDDocument.GetLexiconLanguage">
            <summary>Get actual source language used for lexicon.</summary>
            <returns>
            string with actual language or return null if lexicon is not
            specified  or if language is not specified.
            </returns>
        </member>
        <member name="M:xdef.net.XDDocument.SetLexiconLanguage(System.String)">
            <summary>Set actual source language used for lexicon.</summary>
            <param name="language">string with language or null.</param>
            <exception cref="T:xdef.net.Connection.RemoteCallException">
            if lexicon not specified
            or if language is not specified.
            </exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xtranslate(System.String,System.String,System.String,xdef.net.Sys.ReportWriter)">
            <summary>
            Translate the input element from the source language to the destination
            language according to lexicon.
            </summary>
            <param name="elem">
            path to the source element or the string
            with element.
            </param>
            <param name="sourceLanguage">name of source language.</param>
            <param name="destLanguage">name of destination language.</param>
            <param name="reporter">the reporter where to write errors or null.</param>
            <returns>element converted to the destination language.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDDocument.Xtranslate(System.Xml.Linq.XElement,System.String,System.String,xdef.net.Sys.ReportWriter)">
            <summary>
            Translate the input element from the source language to the destination
            language according to lexicon.
            </summary>
            <param name="elem">the element in the source language.</param>
            <param name="sourceLanguage">name of source language.</param>
            <param name="destLanguage">name of destination language.</param>
            <param name="reporter">the reporter where to write errors or null.</param>
            <returns>element converted to the destination language.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="T:xdef.net.XDFactory">
            <summary>
            Provides generation of
            <see cref="T:xdef.net.XDPool"/>
            from source
            X-definitions. You can modify properties of compilation by parameters from
            properties (see
            <see cref="T:xdef.net.XDConstants"/>
            ). In most of cases you can
            get
            <see cref="T:xdef.net.XDPool"/>
            directly by using of static methods of
            <see cref="T:xdef.net.XDFactory"/>
            class. You can also create a XDBuilder when
            you have to compile XDPool from different sources of X-definitions.
            <p>The external methods must be static. The list of external classes with
            the external methods can be passed as a parameter containing array of
            classes. If relevant method is not found in the list of classes then the
            generator of XDPool is searching the the method in the system class path.</p>
            Typical use of XDFactory:
            <pre><tt>
            // 1. Create XDPool from one source and no properties:
            File xdef = ...
            XDPool xd = XDFactory.compileXD(null, xdef);
            ...
            // 2. Create XDPool from more sources and with properties:
            File[] xdefs = ...
            Properties props = new Properties();
            props.setProperty(key, value); //see
            <see cref="T:xdef.net.XDConstants"/>
            XDPool xd = XDFactory.compileXD(props, xdefs);
            ...
            </tt></pre>
            </summary>
            <author>Štěpán Adámek</author>
        </member>
        <member name="M:xdef.net.XDFactory.GetXDVersion">
            <summary>Get version of this implementation of X-definition.</summary>
            <returns>version of this implementation of X-definition.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.GetXDBuilder(xdef.net.Utils.Properties)">
            <summary>Creates instance of XDBuilder with properties.</summary>
            <param name="props">
            Properties or null -
            see
            <see cref="T:xdef.net.XDConstants"/>
            .
            </param>
            <returns>created XDBuilder.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.GetXDBuilder(xdef.net.Sys.ReportWriter,xdef.net.Utils.Properties)">
            <summary>Creates instance of XDBuilder with properties.</summary>
            <param name="reporter">the ReportWriter to be used for error reporting.</param>
            <param name="props">
            Properties or <tt>null</tt> -
            see
            <see cref="T:xdef.net.XDConstants"/>
            .
            </param>
            <returns>created XDBuilder.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.CompileXD(xdef.net.Utils.Properties,System.String[])">
            <summary>Compile XDPool from sources.</summary>
            <param name="props">Properties or <tt>null</tt>.</param>
            <param name="parameters">list of strings with X-definition file names.</param>
            <returns>generated XDPool.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.CompileXD(xdef.net.Utils.Properties,System.Uri[])">
            <summary>Compile XDPool from URLs.</summary>
            <param name="props">Properties or <tt>null</tt>.</param>
            <param name="parameters">list of URLs with X-definition sources.</param>
            <returns>generated XDPool.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.CompileXD(xdef.net.Utils.Properties,xdef.net.Utils.FilePath[])">
            <summary>Compile XDPool from InputStreams.</summary>
            <param name="props">Properties or <tt>null</tt>.</param>
            <param name="parameters">list of files with X-definition sources.</param>
            <returns>generated XDPool.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.CompileXD(xdef.net.Utils.Properties,System.IO.Stream[])">
            <summary>Compile XDPool from InputStreams.</summary>
            <param name="props">Properties or <tt>null</tt>.</param>
            <param name="parameters">list of files with X-definition sources.</param>
            <returns>generated XDPool.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.CompileXD(xdef.net.Utils.Properties,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Compile XDPool from sources and assign the sourceId to each source.</summary>
            <param name="props">Properties or <tt>null</tt>.</param>
            <param name="sources">
            array with source data with X-definitions source data.
            (The type of items can only be either the InputStreams or the String
            containing an XML document).
            </param>
            <param name="sourceIds">
            array with sourceIds (corresponding to the items
            in the argument sources).
            </param>
            <returns>generated XDPool.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.CompileXD(xdef.net.Utils.Properties,System.Object[])">
            <summary>Compile XDPool from source.</summary>
            <param name="props">Properties or <tt>null</tt>.</param>
            <param name="parameters">list of sources, source pairs or external classes.</param>
            <returns>generated XDPool.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.CompileXD(xdef.net.Sys.ArrayReporter,xdef.net.Utils.Properties,System.Object[])">
            <summary>Compile XDPool from source.</summary>
            <param name="reporter">the ReportWriter to be used for error reporting. Only array reporter supported due to bug in original library.</param>
            <param name="props">Properties or <tt>null</tt>.</param>
            <param name="parameters">list of sources, source pairs or external classes.</param>
            <returns>generated XDPool.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.Xparse(System.IO.Stream,xdef.net.Sys.ReportWriter)">
            <summary>Parse XML with X-definition declared in source input stream.</summary>
            <param name="source">where to read XML.</param>
            <param name="reporter">used for error messages or <tt>null</tt>.</param>
            <returns>created XDDocument object.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.Xparse(System.String,xdef.net.Sys.ReportWriter)">
            <summary>Parse XML with X-definition declared in source.</summary>
            <param name="source">URL, pathname direct to XML or direct XML.</param>
            <param name="reporter">used for error messages or <tt>null</tt>.</param>
            <returns>created XDDocument object.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.CreateXDInput(System.IO.Stream,System.Boolean)">
            <summary>Creates XDInput from InputStream.</summary>
            <param name="value">the stream.</param>
            <param name="xmlFormat">
            if <tt>true</tt> the input data are in XML format,
            otherwise in string format.
            </param>
            <returns>the XDInput object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.CreateXDInput(System.IO.StreamReader,System.Boolean)">
            <summary>Creates XDInput from InputStream.</summary>
            <param name="value">the stream.</param>
            <param name="xmlFormat">
            if <tt>true</tt> the input data are in XML format,
            otherwise in string format.
            </param>
            <returns>the XDInput object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.CreateXDInput(xdef.net.Sys.ReportReader)">
            <summary>Creates XDInput from InputStream.</summary>
            <param name="value">ReportReader.</param>
            <returns>the XDInput object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.CreateXDOutput(xdef.net.Sys.ReportWriter)">
            <summary>Creates XDOutput from reporter.</summary>
            <param name="value">the reporter.</param>
            <returns>the XDOutput object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.CreateXDOutput(System.IO.Stream,System.Boolean)">
            <summary>Creates XDOutput from Stream.</summary>
            <param name="value">Writer object.</param>
            <param name="xmlFormat">
            if <tt>true</tt> the output will be in XML format,
            otherwise in string format.
            </param>
            <returns>the XDOutput object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.CreateXDElement(System.Xml.Linq.XElement)">
            <summary>Creates XDElement from System.XML.Linq.XElement</summary>
            <param name="el">System.XML.Linq.XElement</param>
            <returns>XDElement object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.CreateSQLService(System.String,System.String,System.String)">
            <summary>Creates XDService object with JDBC support.</summary>
            <param name="url">string with connection URL.</param>
            <param name="user">user name.</param>
            <param name="passw">password.</param>
            <returns>XDService object.</returns>
            <exception cref="T:xdef.net.Connection.RemoteCallException">if an error occurs.</exception>
        </member>
        <member name="M:xdef.net.XDFactory.WriteXDPool(System.IO.Stream,xdef.net.XDPool)">
            <summary>
            Writes XDPool to provided stream.
            </summary>
            <param name="stream">Target stream.</param>
            <param name="pool">Pool to write</param>
        </member>
        <member name="M:xdef.net.XDFactory.WriteXDPool(xdef.net.Utils.FilePath,xdef.net.XDPool)">
            <summary>
            Writes XDPool to given file.
            </summary>
            <param name="path">Filepath to write pool.</param>
            <param name="pool">Pool to write.</param>
        </member>
        <member name="M:xdef.net.XDFactory.WriteXDPool(System.String,xdef.net.XDPool)">
            <summary>
            Writes XDPool to specified path.
            </summary>
            <param name="path">String path to file.</param>
            <param name="pool">Pool to write</param>
        </member>
        <member name="M:xdef.net.XDFactory.ReadXDPool(System.IO.Stream)">
            <summary>
            Reads XDPool from stream. Streams are slower than passing filenames in this implementation.
            Consider passing sources as FileName instead.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>XDPool object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.ReadXDPool(xdef.net.Utils.FilePath)">
            <summary>
            Reads XDPool from specified file.
            </summary>
            <param name="file">Path to file with XDPool.</param>
            <returns>XDPool object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.ReadXDPool(System.String)">
            <summary>
            Reads XDPool from specified file.
            </summary>
            <param name="filePath">String path to file with XDPool.</param>
            <returns>XDPool object.</returns>
        </member>
        <member name="M:xdef.net.XDFactory.ReadXDPool(System.Uri)">
            <summary>
            Reads XDPool from specified URL
            </summary>
            <param name="url">Url from which to read XDPool.</param>
            <returns>XDPool object.</returns>
        </member>
        <member name="T:xdef.net.XDPool">
            <summary>
            Provides the interface to object containing compiled code of set of
            X-definitions.
            </summary>
            <remarks>
            Provides the interface to object containing compiled code of set of
            X-definitions. You can create from XDPool the XDDocument.
            </remarks>
            <author>Štěpán Adámek</author>
        </member>
        <member name="M:xdef.net.XDPool.GetVersionInfo">
            <summary>Get version information.</summary>
            <returns>version information.</returns>
        </member>
        <member name="M:xdef.net.XDPool.CreateXDDocument(System.String)">
            <summary>Create new XDDocument.</summary>
            <param name="name">name of X-definition (or null) or path to model.</param>
            <returns>Created XDDocument.</returns>
        </member>
        <member name="M:xdef.net.XDPool.CreateXDDocument">
            <summary>Create new XDDocument with default X-definition.</summary>
            <returns>Created XDDocument.</returns>
        </member>
        <member name="M:xdef.net.XDPool.Exists(System.String)">
            <summary>Check if exists the X-definition of given name.</summary>
            <param name="name">
            the name of X-definition (or <tt>null</tt>) if
            X-definition without name is checked.
            </param>
            <returns>
            true if and only if the X-definition of given name exists in
            the XDPool.
            </returns>
        </member>
        <member name="M:xdef.net.XDPool.GetXMDefinitionNames">
            <summary>Get array with all XMDefinitions from this XDPool.</summary>
            <returns>array with all XMDefinitions from this XDPool.</returns>
        </member>
        <member name="M:xdef.net.XDPool.Display">
            <summary>Display XDPool on standard output.</summary>
        </member>
        <member name="M:xdef.net.XDPool.DisplayCode">
            <summary>Display code of XDPool on standard output.</summary>
        </member>
        <member name="M:xdef.net.XDPool.DisplayDebugInfo">
            <summary>Display debugging information of XDPool on standard output.</summary>
        </member>
        <member name="M:xdef.net.XDPool.GetDisplayMode">
            <summary>Get display mode.</summary>
            <returns>display mode.</returns>
        </member>
        <member name="M:xdef.net.XDPool.IsResolveIncludes">
            <summary>Get switch if the parser allows XML XInclude.</summary>
            <returns>true if the parser allows XInclude.</returns>
        </member>
        <member name="M:xdef.net.XDPool.IsDebugMode">
            <summary>Check if debug mode is set on.</summary>
            <returns>value of debug mode.</returns>
        </member>
        <member name="M:xdef.net.XDPool.IsDebugShowResult">
            <summary>Check if show result mode is set for debug mode.</summary>
            <returns>true if show result mode is set.</returns>
        </member>
        <member name="M:xdef.net.XDPool.IsIgnoreUnresolvedExternals">
            <summary>Check if unresolved externals will be ignored.</summary>
            <returns>true if unresolved externals will be ignored.</returns>
        </member>
        <member name="M:xdef.net.XDPool.IsLocationsdetails">
            <summary>Get the switch if XML parser will generate detailed location reports.</summary>
            <returns>the location details switch.</returns>
        </member>
        <member name="M:xdef.net.XDPool.IsIllegalDoctype">
            <summary>Get switch if the parser do not allow DOCTYPE.</summary>
            <returns>
            true if the parser do not allow DOCTYPE or return false
            if DOCTYPE is processed.
            </returns>
        </member>
        <member name="M:xdef.net.XDPool.IsChkWarnings">
            <summary>Get switch if the parser will check warnings as errors.</summary>
            <returns>true if the parser checks warnings as errors.</returns>
        </member>
        <member name="M:xdef.net.XDPool.GetMinYear">
            <summary>Get minimum valid year of date.</summary>
            <returns>minimum valid year (int.MinValue if not set).</returns>
        </member>
        <member name="M:xdef.net.XDPool.GetMaxYear">
            <summary>Get maximum valid year of date (or int.MaxVaule if not set).</summary>
            <returns>maximum valid year (int.MinValue if not set).</returns>
        </member>
        <member name="M:xdef.net.XDPool.GetDebugEditor">
            <summary>Get debug editor class name.</summary>
            <returns>
            debug editor class name (if null the default debug editor
            will be used).
            </returns>
        </member>
        <member name="M:xdef.net.XDPool.GetXdefEditor">
            <summary>Get class name of the editor of X-definition.</summary>
            <returns>class name of the editor of X-definition which will be used).</returns>
        </member>
    </members>
</doc>
