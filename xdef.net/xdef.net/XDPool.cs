using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using xdef.net.Connection;
using xdef.net.Sys;
using xdef.net.Utils;

namespace xdef.net
{
    /// <summary>
	/// Provides the interface to object containing compiled code of set of
	/// X-definitions.
	/// </summary>
	/// <remarks>
	/// Provides the interface to object containing compiled code of set of
	/// X-definitions. You can create from XDPool the XDDocument.
	/// </remarks>
	/// <author>Štěpán Adámek</author>
    public sealed class XDPool : RemoteObject
    {
        private const int FUNCTION_GETVERSIONINFO = 1;
        private const int FUNCTION_CREATEXDDOCUMENT_1 = 2;
        private const int FUNCTION_CREATEXDDOCUMENT_2 = 3;
        private const int FUNCTION_EXISTS = 4;
        private const int FUNCTION_GETXMDEFINITIONS = 5;
        private const int FUNCTION_GETXMDEFINITIONNAMES = 6;
        private const int FUNCTION_GETXMDEFINITION_1 = 7;
        private const int FUNCTION_GETXMDEFINITION_2 = 8;
        private const int FUNCTION_FINDMODEL = 9;
        private const int FUNCTION_DISPLAY_1 = 10;
        private const int FUNCTION_DISPLAY_2 = 11;
        private const int FUNCTION_DISPLAYCODE_1 = 12;
        private const int FUNCTION_DISPLAYCODE_2 = 13;
        private const int FUNCTION_DISPLAYDEBUGINFO_1 = 14;
        private const int FUNCTION_DISPLAYDEBUGINFO_2 = 15;
        private const int FUNCTION_GETDEBUGINFO = 16;
        private const int FUNCTION_GETVARIABLETABLE = 17;
        private const int FUNCTION_GETDISPLAYMODE = 18;
        private const int FUNCTION_ISRESOLVEINCLUDES = 19;
        private const int FUNCTION_ISDEBUGMODE = 20;
        private const int FUNCTION_ISDEBUGSHOWRESULT = 21;
        private const int FUNCTION_ISIGNOREUNRESOLVEDEXTERNALS = 22;
        private const int FUNCTION_ISLOCATIONSDETAILS = 23;
        private const int FUNCTION_ISILLEGALDOCTYPE = 24;
        private const int FUNCTION_ISCHKWARNINGS = 25;
        private const int FUNCTION_GETXCOMPONENTS = 26;
        private const int FUNCTION_GETXCOMPONENTBINDS = 27;
        private const int FUNCTION_GETXCOMPONENTENUMS = 28;
        private const int FUNCTION_GETMINYEAR = 29;
        private const int FUNCTION_GETMAXYEAR = 30;
        private const int FUNCTION_GETSPECIALDATES = 31;
        private const int FUNCTION_GETXDSOURCEINFO = 32;
        private const int FUNCTION_GETDEBUGEDITOR = 33;
        private const int FUNCTION_GETXDEFEDITOR = 34;



        internal XDPool(int objectId, Client client) : base(objectId, client)
        {

        }

        // Autogenerated method
        //  public abstract java.lang.String getVersionInfo();
        /// <summary>Get version information.</summary>
		/// <returns>version information.</returns>
        public String GetVersionInfo()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETVERSIONINFO, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadString();
                }
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.XDDocument createXDDocument(java.lang.String);
        /// <summary>Create new XDDocument.</summary>
		/// <param name="name">name of X-definition (or null) or path to model.</param>
		/// <returns>Created XDDocument.</returns>
        public XDDocument CreateXDDocument(string name)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(name);
                var res = SendRequestWithResponse(new Request(FUNCTION_CREATEXDDOCUMENT_1, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDDocument(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.XDDocument createXDDocument();
        /// <summary>Create new XDDocument with default X-definition.</summary>
		/// <returns>Created XDDocument.</returns>
        public XDDocument CreateXDDocument()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_CREATEXDDOCUMENT_2, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDDocument(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract boolean exists(java.lang.String);
        /// <summary>Check if exists the X-definition of given name.</summary>
		/// <param name="name">
		/// the name of X-definition (or <tt>null</tt>) if
		/// X-definition without name is checked.
		/// </param>
		/// <returns>
		/// true if and only if the X-definition of given name exists in
		/// the XDPool.
		/// </returns>
        public bool Exists(string name)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(name);
                var res = SendRequestWithResponse(new Request(FUNCTION_EXISTS, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadBoolean();
                }
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.model.XMDefinition[] getXMDefinitions();
        /*
        public XMDefinition[] GetXMDefinitions()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXMDEFINITIONS, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XMDefinition[](reader.ReadInt32(), _client);
                }
            }
        }*/

        // Autogenerated method
        //  public abstract java.lang.String[] getXMDefinitionNames();
        /// <summary>Get array with all XMDefinitions from this XDPool.</summary>
        /// <returns>array with all XMDefinitions from this XDPool.</returns>
        public IEnumerable<string> GetXMDefinitionNames()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXMDEFINITIONNAMES, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return reader.ReadStringArray();
                }
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.model.XMDefinition getXMDefinition(java.lang.String)
        /*
        public XMDefinition GetXMDefinition(String arg0)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(arg0);
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXMDEFINITION_1, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XMDefinition(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.model.XMDefinition getXMDefinition();
        public XMDefinition GetXMDefinition()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXMDEFINITION_2, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XMDefinition(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.model.XMNode findModel(java.lang.String);
        public XMNode FindModel(String arg0)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(arg0);
                var res = SendRequestWithResponse(new Request(FUNCTION_FINDMODEL, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XMNode(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract void display(java.io.PrintStream);
        public void Display(PrintStream arg0)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(arg0);
                var res = SendRequestWithResponse(new Request(FUNCTION_DISPLAY_1, builder.Build(), ObjectId));
                return;
            }
        }*/

        // Autogenerated method
        //  public abstract void display();
        /// <summary>Display XDPool on standard output.</summary>
        public void Display()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_DISPLAY_2, builder.Build(), ObjectId));
                return;
            }
        }

        // Autogenerated method
        //  public abstract void displayCode(java.io.PrintStream);
        /*
        public void DisplayCode(PrintStream arg0)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(arg0);
                var res = SendRequestWithResponse(new Request(FUNCTION_DISPLAYCODE_1, builder.Build(), ObjectId));
                return;
            }
        }*/

        // Autogenerated method
        //  public abstract void displayCode();
        /// <summary>Display code of XDPool on standard output.</summary>
        public void DisplayCode()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_DISPLAYCODE_2, builder.Build(), ObjectId));
                return;
            }
        }

        // Autogenerated method
        //  public abstract void displayDebugInfo(java.io.PrintStream);
        /*
        public void DisplayDebugInfo(PrintStream arg0)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(arg0);
                var res = SendRequestWithResponse(new Request(FUNCTION_DISPLAYDEBUGINFO_1, builder.Build(), ObjectId));
                return;
            }
        }*/

        // Autogenerated method
        //  public abstract void displayDebugInfo();
        /// <summary>Display debugging information of XDPool on standard output.</summary>
        public void DisplayDebugInfo()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_DISPLAYDEBUGINFO_2, builder.Build(), ObjectId));
                return;
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.model.XMDebugInfo getDebugInfo();
        /*
        public XMDebugInfo GetDebugInfo()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETDEBUGINFO, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XMDebugInfo(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.model.XMVariableTable getVariableTable();
        public XMVariableTable GetVariableTable()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETVARIABLETABLE, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XMVariableTable(reader.ReadInt32(), _client);
                }
            }
        }*/

        // Autogenerated method
        //  public abstract byte getDisplayMode();
        /// <summary>Get display mode.</summary>
		/// <returns>display mode.</returns>
        public byte GetDisplayMode()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETDISPLAYMODE, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return reader.ReadByte();
                }
            }
        }

        // Autogenerated method
        //  public abstract boolean isResolveIncludes();
        /// <summary>Get switch if the parser allows XML XInclude.</summary>
		/// <returns>true if the parser allows XInclude.</returns>
        public bool IsResolveIncludes()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_ISRESOLVEINCLUDES, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadBoolean();
                }
            }
        }

        // Autogenerated method
        //  public abstract boolean isDebugMode();
        /// <summary>Check if debug mode is set on.</summary>
		/// <returns>value of debug mode.</returns>
        public bool IsDebugMode()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_ISDEBUGMODE, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadBoolean();
                }
            }
        }

        // Autogenerated method
        //  public abstract boolean isDebugShowResult();
        /// <summary>Check if show result mode is set for debug mode.</summary>
		/// <returns>true if show result mode is set.</returns>
        public bool IsDebugShowResult()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_ISDEBUGSHOWRESULT, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadBoolean();
                }
            }
        }

        // Autogenerated method
        //  public abstract boolean isIgnoreUnresolvedExternals();
        /// <summary>Check if unresolved externals will be ignored.</summary>
		/// <returns>true if unresolved externals will be ignored.</returns>
        public bool IsIgnoreUnresolvedExternals()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_ISIGNOREUNRESOLVEDEXTERNALS, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadBoolean();
                }
            }
        }

        // Autogenerated method
        //  public abstract boolean isLocationsdetails();
        /// <summary>Get the switch if XML parser will generate detailed location reports.</summary>
		/// <returns>the location details switch.</returns>
        public bool IsLocationsdetails()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_ISLOCATIONSDETAILS, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadBoolean();
                }
            }
        }

        // Autogenerated method
        //  public abstract boolean isIllegalDoctype();
        /// <summary>Get switch if the parser do not allow DOCTYPE.</summary>
		/// <returns>
		/// true if the parser do not allow DOCTYPE or return false
		/// if DOCTYPE is processed.
		/// </returns>
        public bool IsIllegalDoctype()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_ISILLEGALDOCTYPE, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadBoolean();
                }
            }
        }

        // Autogenerated method
        //  public abstract boolean isChkWarnings();
        /// <summary>Get switch if the parser will check warnings as errors.</summary>
		/// <returns>true if the parser checks warnings as errors.</returns>
        public bool IsChkWarnings()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_ISCHKWARNINGS, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadBoolean();
                }
            }
        }
        /*
        // Autogenerated method
        //  public abstract java.util.Map<java.lang.String, java.lang.String> getXComponents();
        public String> GetXComponents()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXCOMPONENTS, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new String> (reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract java.util.Map<java.lang.String, java.lang.String> getXComponentBinds();
        public String> GetXComponentBinds()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXCOMPONENTBINDS, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new String> (reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract java.util.Map<java.lang.String, java.lang.String> getXComponentEnums();
        public String> GetXComponentEnums()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXCOMPONENTENUMS, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new String> (reader.ReadInt32(), _client);
                }
            }
        }
        */
        // Autogenerated method
        //  public abstract int getMinYear();
        public int GetMinYear()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETMINYEAR, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadInt32();
                }
            }
        }

        // Autogenerated method
        //  public abstract int getMaxYear();
        public int GetMaxYear()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETMAXYEAR, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadInt32();
                }
            }
        }
        /*
        // Autogenerated method
        //  public abstract org.xdef.sys.SDatetime[] getSpecialDates();
        public SDatetime[] GetSpecialDates()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETSPECIALDATES, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new SDatetime[](reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        //  public abstract org.xdef.impl.XDSourceInfo getXDSourceInfo();
        public XDSourceInfo GetXDSourceInfo()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXDSOURCEINFO, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDSourceInfo(reader.ReadInt32(), _client);
                }
            }
        }*/

        // Autogenerated method
        //  public abstract java.lang.String getDebugEditor();
        public String GetDebugEditor()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETDEBUGEDITOR, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadString();
                }
            }
        }

        // Autogenerated method
        //  public abstract java.lang.String getXdefEditor();
        public String GetXdefEditor()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_GETXDEFEDITOR, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    return reader.ReadString();
                }
            }
        }





    }
}
