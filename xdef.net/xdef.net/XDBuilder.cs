using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using xdef.net.Connection;
using xdef.net.Connection.Library;
using xdef.net.Utils;

namespace xdef.net
{
    /// <summary>
	/// Provides building of
	/// <see cref="XDPool"/>
	/// . This object you need to
	/// use only in special case you want to make incremental building of
	/// <see cref="XDPool"/>
	/// . In most of cases you can create
	/// <see cref="XDPool"/>
	/// with static methods of
	/// <see cref="XDFactory"/>
	/// .
	/// <p>Typical use of XDBuilder:</p>
	/// <pre><tt>
	/// // 1. Create XDBuilder with properties.
	/// Properties props = new Properties();
	/// props.setProperty(key, value); //see
	/// <see cref="XDConstants"/>
	/// ...
	/// XDBuilder buider = XDFactory.getXDBuilder(props);
	/// builder.setClassLoader(classloader); // set class loader for externals
	/// builder.setReporter(reporter); // set reporter for builder error reports
	/// builder.setExternals(externals); // set external objects
	/// ...
	/// builder.setSource(source 1); //compile source with X-definition
	/// ...
	/// builder.setSource(source n); //compile source with X-definition
	/// ...
	/// XDPool xd = builder.compileXD(); //build XDPool
	/// ...
	/// </tt></pre>
	/// </summary>
	/// <author>Vaclav Trojan</author>
    public class XDBuilder : RemoteObject
    {
        private const int FUNCTION_SETSOURCE_1 = 1;
        private const int FUNCTION_SETSOURCE_2 = 2;
        private const int FUNCTION_SETSOURCE_3 = 3;
        private const int FUNCTION_SETSOURCE_4 = 4;
        private const int FUNCTION_SETSOURCE_5 = 5;
        private const int FUNCTION_SETSOURCE_6 = 6;
        private const int FUNCTION_SETSOURCE_7 = 7;
        private const int FUNCTION_SETCLASSLOADER = 8;
        private const int FUNCTION_SETEXTERNALS = 9;
        private const int FUNCTION_COMPILEXD = 10;

        internal XDBuilder(int objectId, Client client) : base(objectId, client)
        {
        }
        // Autogenerated method
        // public abstract org.xdef.XDBuilder setSource(java.lang.String, java.lang.String)
        /// <summary>Add source data of X-definition or collection.</summary>
		/// <remarks>
		/// Add source data of X-definition or collection. If the argument starts
		/// with "&lt;" character then it is interpreted as source X-definition data,
		/// otherwise it can be the pathname of the file or URL. If it is a pathname
		/// format then it may contain also wildcard characters representing a group
		/// of files.
		/// </remarks>
		/// <param name="source">The string with source X-definition.</param>
		/// <param name="sourceId">
		/// name of source source data corresponding to
		/// the argument source (may be null).
		/// </param>
		/// <returns>this XDBuilde object.</returns>
        public XDBuilder SetSource(string source, string sourceId)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(source);
                builder.Add(sourceId);
                var res = SendRequestWithResponse(new Request(FUNCTION_SETSOURCE_1, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDBuilder(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        // public abstract org.xdef.XDBuilder setSource(java.lang.String...)
        /// <summary>Add source data of X-definitions or collections.</summary>
		/// <remarks>
		/// Add source data of X-definitions or collections. If an item starts with
		/// "&lt;" character then it is interpreted as source data, otherwise
		/// it can be the pathname of the file or URL. If it is a pathname format,
		/// then it may contain also wildcard characters representing a group
		/// of files.
		/// </remarks>
		/// <param name="sources">The string with sources.</param>
		/// <returns>this XDBuilde object.</returns>
        public XDBuilder SetSource(params string[] sources)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(sources);
                var res = SendRequestWithResponse(new Request(FUNCTION_SETSOURCE_2, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDBuilder(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        // public abstract org.xdef.XDBuilder setSource(java.lang.String[], java.lang.String[])
        /// <summary>Add source data of X-definitions or collections.</summary>
		/// <remarks>
		/// Add source data of X-definitions or collections. If an item starts with
		/// "&lt;" character then it is interpreted as source data, otherwise
		/// it can be the pathname of the file or URL. If it is a pathname format,
		/// then it may contain also wildcard characters representing a group
		/// of files.
		/// </remarks>
		/// <param name="sources">The string with sources.</param>
		/// <param name="sourceIds">
		/// array of names of source source data corresponding to
		/// the sources argument (any item or even this argument
		/// may be <tt>null</tt>).
		/// </param>
		/// <returns>this XDBuilde object.</returns>
        public XDBuilder SetSource(IEnumerable<string> sources, IEnumerable<string> sourceIds)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(sources);
                builder.Add(sourceIds);
                var res = SendRequestWithResponse(new Request(FUNCTION_SETSOURCE_3, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDBuilder(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        // public abstract org.xdef.XDBuilder setSource(java.io.File...)
        /// <summary>Add files with source data of  X-definitions or collections.</summary>
		/// <param name="sources">array of files with sources.</param>
		/// <returns>this XDBuilde object.</returns>
        public XDBuilder SetSource(params FilePath[] sources)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(sources);
                var res = SendRequestWithResponse(new Request(FUNCTION_SETSOURCE_4, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDBuilder(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        // public abstract org.xdef.XDBuilder setSource(java.net.URL...)
        /// <summary>Add URLs with source data of X-definitions or collections.</summary>
		/// <param name="sources">array of URLs with sources.</param>
		/// <returns>this XDBuilde object.</returns>
        public XDBuilder SetSource(params Uri[] sources)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(sources);
                var res = SendRequestWithResponse(new Request(FUNCTION_SETSOURCE_5, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDBuilder(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        // public abstract org.xdef.XDBuilder setSource(java.io.InputStream, java.lang.String)
        /// <summary>Add input stream with source data of a X-definition or collection.</summary>
		/// <param name="source">The input stream with source.</param>
		/// <param name="sourceId">
		/// name of source source data corresponding to
		/// stream (may be null).
		/// </param>
		/// <returns>this XDBuilde object.</returns>
        public XDBuilder SetSource(Stream source, string sourceId)
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var wrap = new RemoteStreamWrapper(_client, source);
                builder.Add(_client.RegisterLocalObject(wrap));
                builder.Add(sourceId);
                var res = SendRequestWithResponse(new Request(FUNCTION_SETSOURCE_6, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDBuilder(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        // public abstract org.xdef.XDBuilder setSource(java.io.InputStream[], java.lang.String[])
        /// <summary>Add input streams with sources data of X-definitions or collections.</summary>
		/// <param name="sources">array of input streams with sources.</param>
		/// <param name="sourceIds">
		/// array of names of source source data corresponding to
		/// streams from the argument sources (any item or even this argument
		/// may be <tt>null</tt>).
		/// </param>
		/// <returns>this XDBuilde object.</returns>
        public XDBuilder SetSource(IEnumerable<Stream> sources, IEnumerable<string> sourceIds)
        {
            if (sources.Count() != sourceIds.Count()) throw new ArgumentException("Different number of elements in passed collecitons.");
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                builder.Add(sources.Count());
                foreach (var it in sources)
                    builder.Add(_client.RegisterLocalObject(new RemoteStreamWrapper(_client, it)));
                builder.Add(sourceIds);
                var res = SendRequestWithResponse(new Request(FUNCTION_SETSOURCE_7, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDBuilder(reader.ReadInt32(), _client);
                }
            }
        }

        // Autogenerated method
        // public abstract org.xdef.XDBuilder setClassLoader(java.lang.ClassLoader)
        //public XDBuilder SetClassLoader(ClassLoader arg0)
        //{
        //    using (var builder = new BigEndianDataBuilder())
        //    {
        //        // Serialize args here
        //        builder.Add(arg0);
        //        var res = SendRequestWithResponse(new Request(FUNCTION_SETCLASSLOADER, builder.Build(), ObjectId));
        //        using (var reader = res.Reader)
        //        {
        //            // Read response here
        //            return new XDBuilder(reader.ReadInt32(), _client);
        //        }
        //    }
        //}

        // Autogenerated method
        // public abstract org.xdef.XDBuilder setExternals(java.lang.Class<?>...)
        //public XDBuilder SetExternals(Class<?>... arg0)
        //{
        //    using (var builder = new BigEndianDataBuilder())
        //    {
        //        // Serialize args here
        //        builder.Add(arg0);
        //        var res = SendRequestWithResponse(new Request(FUNCTION_SETEXTERNALS, builder.Build(), ObjectId));
        //        using (var reader = res.Reader)
        //        {
        //            // Read response here
        //            return new XDBuilder(reader.ReadInt32(), _client);
        //        }
        //    }
        //}

        // Autogenerated method
        // public abstract org.xdef.XDPool compileXD()
        /// <summary>Compile XDefPool from prepared sources.</summary>
        /// <returns>compiled XDefPool.</returns>
        public XDPool CompileXD()
        {
            using (var builder = new BigEndianDataBuilder())
            {
                // Serialize args here
                var res = SendRequestWithResponse(new Request(FUNCTION_COMPILEXD, builder.Build(), ObjectId));
                using (var reader = res.Reader)
                {
                    // Read response here
                    return new XDPool(reader.ReadInt32(), _client);
                }
            }
        }


    }
}
